<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2、Computer Science on Save Load</title>
    <link>https://www.saveload.cn/Tech/2Computer-Science/</link>
    <description>Recent content in 2、Computer Science on Save Load</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.saveload.cn/Tech/2Computer-Science/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/Computer-Science/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/Computer-Science/</guid>
      <description>Computer Science 标签：计算机科学、《数据结构》、《计算机网络》、《计算机组成原理》、《计算机操作系统》、《离散数学》、《线性代数》、《编译原理》、《数据库原理》、《软件工程》、《软件系统设计》 时间：2020年8月7日17:33:00 连接：https://www.saveload.cn/html/templates/Thinking-In-Java.mk 清华课程表</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/Shell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/Shell/</guid>
      <description>Shell Shell 的最通用含义是指用户用来键入命令的任何程序。shell 隐藏基础操作系统的详细信息，并管理操作系统的 应用程序编程接口（API） 的技术详细信息，该接口是在该操作系统上运行的程序使用的操作系统的级别。
在类Unix操作系统中，用户通常有许多命令行解释器可供选择，用于交互式会话。当用户以交互方式登录系统时，shell 程序将在会话期间自动执行。shell的类型，可以为每个用户定制，通常存储在用户的配置文件中，例如在本地passwd文件或分布式配置系统（如NIS或LDAP）中;但是，用户可以交互方式执行任何其他可用的 shell。 在具有窗口系统的主机（如 macOS）上，某些用户可能永远不会直接使用 shell。在Unix系统上，shell历来是系统启动脚本的实现语言，包括启动窗口系统，配置网络和许多其他基本功能的程序。但是，一些系统供应商已经用不同的方法（如 systemd）取代了传统的基于 shell 的启动系统（init）。
Shell 在计算中，shell 是一种计算机程序，它将操作系统的服务公开给人类用户或其他程序。通常，操作系统 shell 使用命令行界面 （CLI） 或图形用户界面 （GUI），具体取决于计算机的角色和特定操作。它被命名为shell，因为它是操作系统周围的最外层。
命令行 shell 要求用户熟悉命令及其调用语法，并了解有关特定于 shell 的脚本语言（例如 bash）的概念。
Shell 概述 操作系统为其用户提供各种服务，包括文件管理、进程管理（运行和终止应用程序）、批处理以及操作系统监视和配置。
大多数操作系统 shell 都不是底层内核的直接接口，即使 shell 通过直接连接到计算机的外围设备与用户通信也是如此。Shell 实际上是特殊的应用程序，它们使用内核 API 的方式与其他应用程序使用内核 API 的方式相同。shell 通过提示用户输入、解释其输入，然后处理来自底层操作系统的输出（非常类似于读取-评估-打印循环，REPL）来管理用户与系统的交互。由于操作系统shell实际上是一个应用程序，对于大多数操作系统来说，它可以很容易地被另一个类似的应用程序所取代。
除了在本地系统上运行的 shell 之外，还有不同的方法可以使本地用户可以使用远程系统。这种方法通常称为远程访问或远程管理。最初在多用户大型机上可用，通过串行线路或调制解调器连接到大型机的文本终端同时为每个活动用户提供基于文本的UI，远程访问已扩展到类Unix系统和Microsoft Windows。在类Unix系统上，Secure Shell协议通常用于基于文本的shell，而SSH隧道可用于基于X Window系统的图形用户界面（GUI）。在Microsoft Windows上，Remote Desktop Protocol可用于提供GUI远程访问，并且由于Windows Vista，PowerShell Remote可用于通过WMI，RPC和WS-Management进行基于文本的远程访问。
大多数操作系统 shell 都属于以下两类之一：命令行和图形。命令行 shell 为操作系统提供命令行界面 （CLI），而图形 shell 提供图形用户界面 （GUI）。其他可能性虽然不那么常见，但包括语音用户界面和非 CLI 的基于文本的用户界面 （TUI） 的各种实现。基于 CLI 和 GUI 的 shell 的相对优点经常引起争论。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/SSH/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/SSH/</guid>
      <description>SSH 介绍、基本使用及原理 什么是 SSH ？ 先搬 Wikipedia:
安全外壳协议 （SSH） 是一种加密网络协议，用于在不安全的网络上安全地操作网络服务。 它最值得注意的应用是远程登录和命令行执行。
SSH 应用程序基于客户端-服务器体系结构，将 SSH 客户端实例与 SSH 服务器连接起来。SSH 作为一个分层协议套件运行，由三个主要的分层组件组成：传输层提供服务器身份验证，机密性和完整性;用户身份验证协议验证用户到服务器;并且连接协议将加密隧道多路复用到多个逻辑通信通道中。
SSH 是在类 Unix 操作系统上设计的，作为 Telnet 和不安全的远程 Unix shell 协议的替代品，例如 Berkeley Remote Shell（rsh）以及相关的 rlogin 和 rexec 协议，它们都使用不安全的，明文的身份验证令牌传输。
SSH 最初由芬兰计算机科学家 Tatu Ylönen 于 1995 年设计。协议套件的后续开发在几个开发人员组中进行，产生了几种实现变体。该协议规范区分了两个主要版本，称为 SSH-1 和 SSH-2 。最常实现的软件堆栈是 OpenSSH，由 OpenBSD 开发人员于 1999 年作为开源软件发布。实现适用于常用的所有类型的操作系统，包括嵌入式系统。
定义 SSH 使用公钥加密对远程计算机进行身份验证，并允许它在必要时对用户进行身份验证。 SSH 可用于多种方法。以最简单的方式，通信通道的两端使用自动生成的公钥-私钥对对网络连接进行加密，然后使用密码对用户进行身份验证。
当用户手动生成公钥-私钥对时，身份验证实质上是在创建密钥对时执行的，然后可以在没有密码提示的情况下自动打开会话。在这种情况下，公钥放置在所有计算机上，这些计算机上必须允许访问匹配私钥的所有者，该所有者保持私有。虽然身份验证基于私钥，但在身份验证期间，密钥永远不会通过网络传输。SSH 仅验证提供公钥的同一个人是否也拥有匹配的私钥。
在所有版本的 SSH 中，在接受未知公钥为有效之前，验证未知公钥（即将公钥与身份相关联）非常重要。未经验证接受攻击者的公钥将授权未经授权的攻击者为有效用户。
用法 SSH通常用于登录到远程计算机并执行命令，但它也支持隧道，转发TCP端口和X11连接;它可以使用关联的 SSH 文件传输 （SFTP） 或安全复制 （SCP） 协议传输文件。 SSH 使用客户端-服务器模型。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/UnicodeUTF-8UTF-16/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/UnicodeUTF-8UTF-16/</guid>
      <description>ASCII、Unicode、UTF-8、UTF-16 ASCII 计算机只能理解二进制，二进制语言是面向机器的语言，人类能理解的是字符，编码 实际是一种 二进制 与 字符 的映射关系。 ASCII 码实际上是一种映射关系的具体实现，是从二进制字符到字母数字字符的映射
Base64 Base64 也称为 Base64 内容传输编码。Base64 是将二进制数据编码为 ASCII 文本。但它只使用了 64 个字符，再加上大多数字符集中存在的一个填充字符。所以它是一种仅使用可打印字符表示二进制数据的方法。Base64 常用于在通常处理文本数据的场景，表示、传输、存储一些二进制数据，包括MIME的电子邮件及XML的一些复杂数据。
Base64 编码用于通过不能正确处理二进制数据的介质传输数据。因此，对数据进行 Base64 编码以确保数据完整，无需通过此介质进行任何修改。
Unicode Unicode 是另一种字符编码（映射关系的具体实现），它仍然是：位查找 -&amp;gt; 字符，由 Unicode Consortium 维护，其负责制定国际使用的软件标准。IT 行业将 Unicode 标准化以对计算机和其他电子和通信设备中的字符进行编码和表示。
Unicode 由许多代码点组成（将来自世界各地的大量字符映射到所有计算机都可以引用的键），代码点的集合称为字符集，这就是 Unicode。开发 Unicode 的目标是通过一种独特的方式将世界上任何语言的任何字符或符号转换成唯一的数字。可以在 unicode.org 上查找任何 Unicode 字符的编号，包括表情符号！
Unicode ASCII 含义 通用字符集 美国信息交换标准代码 用法 由IT行业标准化,用于在计算机中编码和表示字符。 用于电子通信和HTML等编程语言。 表示内容 表示大量字符、公式、数学符号和来自不同语言的文本。 ASCII用于表示英文字母、数字、一些数学符号和语法符号,如标点符号、感叹号等 编码位数 使用四种编码格式，即UTF-7、UTF-8、UTF-16、UTF-32，分别使用7、8、16和32位。 使用 7 位或 8 位来表示各种字符。 内存占用 Unicode 的UTF-8、UTF-16 和UTF-32 编码方案分别使用8、16和32 位，因此占用的内存较多。 在编码中使用 7 或 8 位；因此，它在内存中占用的空间较小。 UTF-8、UTF-16、UTF-32 （1）基本概念 UTF 是 Unicode 编码方式的一种。UTF 编码由 Unicode 标准定义，能够对需要的每个 Unicode 代码点进行编码。Unicode 编码方案根据用于对字符进行编码的位数进行分类。目前使用的 Unicode 编码方案有 UTF-7、UTF-8、UTF-16 和 UTF-32 ，分别使用 7 位、8 位、16 位和 32 位来表示字符。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/%E7%BC%96%E7%A0%81%E5%8A%A0%E5%AF%86%E4%B8%8E%E5%AF%86%E7%A0%81%E5%93%88%E5%B8%8C%E6%BC%94%E8%BF%9B%E7%AE%80%E5%8F%B2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/%E7%BC%96%E7%A0%81%E5%8A%A0%E5%AF%86%E4%B8%8E%E5%AF%86%E7%A0%81%E5%93%88%E5%B8%8C%E6%BC%94%E8%BF%9B%E7%AE%80%E5%8F%B2/</guid>
      <description>编码，加密，与密码哈希演进简史 转自：编码，加密，与密码哈希演进简史
作者：logto
链接：https://www.v2ex.com/t/957713#reply18
来源：V2EX
前言 字如其名，密码哈希是从密码计算哈希值的过程。哈希值通常存储在数据库中，在登录过程中，用户输入的密码的哈希值会被计算并与存储在数据库中的哈希值进行比较。如果匹配成功，则验证通过。
在我们深入了解密码哈希算法的演进之前，我们先简单探讨一下为什么需要它。
明文密码：一个重大的安全风险 想象一下，你是一个网站的用户，并在该网站注册了一个账户。有一天，该网站被黑客攻击，数据库泄漏了。如果网站以明文形式存储密码，黑客可以直接访问你的密码。由于许多人在多个网站上重复使用密码，黑客可以使用这个密码来未经授权地访问你的其他账户。如果你在电子邮件账户上使用相同或类似的密码，情况会变得更糟，因为黑客可以重置你的密码并接管你所有关联的账户。
即使没有数据泄漏，在大型团队中，任何有数据库访问权限的人都可以看到密码。与其他信息相比，密码具有高度敏感性，你绝对不希望任何人能够访问它们。
很明显，明文存储密码是一个业余的错误。不幸的是，如果你搜索“password leak plaintext”，你会发现像 Facebook、DailyQuiz 和 GoDaddy 这样的大公司都曾遭遇明文密码泄漏。很可能还有许多其他公司犯了同样的错误。
编码（ encoding ），加密（ encryption ），哈希（ hashing ） 这三个术语经常被混淆，但它们是不同的概念。
编码（ encoding ） 编码是密码存储中首先要排除的内容。例如，Base64 是一种编码算法，将二进制数据转换为字符字符串（ Node.js ）：
const data = &amp;#39;Hello, world!&amp;#39;;
const encoded = Buffer.from(data).toString(&amp;#39;base64&amp;#39;);
console.log(encoded); // SGVsbG8sIHdvcmxkIQ== 知道编码算法后，任何人都可以解码编码后的字符串并恢复原始数据：
const encoded = &amp;#39;SGVsbG8sIHdvcmxkIQ==&amp;#39;;
const data = Buffer.from(encoded, &amp;#39;base64&amp;#39;).toString();
console.log(data); // Hello, world! 对于黑客来说，大多数编码算法等同于明文。常见的编码有 ASCII、UTF－8、Unicode、Base64 等.
加密（ encryption ） 在哈希算法流行之前，加密也被用于存储密码，例如使用 AES 。加密涉及使用密钥（或一对密钥）对数据进行加密和解密。
加密的问题在于“解密”一词。这意味着加密是可逆的，如果黑客获得密钥，他们可以解密密码并获取明文密码。</description>
    </item>
    
  </channel>
</rss>
