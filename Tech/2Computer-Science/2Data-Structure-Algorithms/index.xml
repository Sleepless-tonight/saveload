<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2、Data Structure &amp; Algorithms on Save Load</title>
    <link>https://www.saveload.cn/Tech/2Computer-Science/2Data-Structure-Algorithms/</link>
    <description>Recent content in 2、Data Structure &amp; Algorithms on Save Load</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.saveload.cn/Tech/2Computer-Science/2Data-Structure-Algorithms/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/2Data-Structure-Algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95Java-%E6%8F%8F%E8%BF%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/2Data-Structure-Algorithms/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95Java-%E6%8F%8F%E8%BF%B0/</guid>
      <description>第一章 算法及其复杂度 1.1.4 算法的定义 一个算法还必须具备以下要素： 输入：待处理的信息，即对具体问题的描述。比如，对于上述三个例子来说，输入分别是“任 意给定的直线以及其上的一点”、“任意给定的一条线段”以及“由 n 个可比较元素组成的序 列”。 输出：经过处理之后得到的信息，即问题的答案。比如，对于上述三个例子来说，输出分别 是我们所要得到的“垂直线”、“三等分点”以及“完全有序的序列”。 确定性：任一算法都可以描述为由若干种基本操作组成的序列。在垂直线算法中，“取等长 绳索”、“联结绳索”、“将绳结固定于一点”、“沿特定方向拉直绳索”等操作都属于基本操作。 在三等分线段算法中，基本操作就是欧氏作图法所允许的所有尺规操作。而在起泡排序算法 中，基本操作就是图灵机所允许的各种操作：“读取某一元素的内容”、“比较两个元素的大 小”以及“修改某一元素的内容”等等。 可行性：在相应的计算模型中，每一基本操作都可以实现，且能够在常数时间内完成。 有穷性：对于任何输入，按照算法，经过有穷次基本操作都可以得到正确的输出。 1.2.2 时间复杂度及其度量 时间频度
一个算法中的语句执行次数称为语句频度或时间频度。记为T(n)。 时间复杂度
在时间频度中，n称为问题的规模，当n不断变化时，时间频度T(n)也会不断变化。 算法中基本操作重复执行的次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n),使得当n趋近于无穷大时，T(n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。 记作T(n)=Ｏ(f(n)),称Ｏ(f(n)) 为算法的渐进时间复杂度，简称时间复杂度。 T (n) = Ο(f (n)) 表示存在一个常数C，使得在当n趋于正无穷时总有 T (n) ≤ C * f(n)。 简单来说，就是T(n)在n趋于正无穷时最大也就跟f(n)差不多大(小于等于)。也就是说当n趋于正无穷时T (n)的上界是C * f(n)。 其虽然对f(n)没有规定，但是一般都是取尽可能简单的函数。例如，O(2n^2+n +1) = O (3n^2+n+3) = O (7n^2 + n) = O ( n^2 ) ，一般都只用O(n^2)表示就可以了。 在时间频度不相同时，时间复杂度有可能相同，如T(n)=n2+3n+4与T(n)=4n2+2n+1它们的频度不同，但时间复杂度相同，都为O(n2)。 注意到大O符号里隐藏着一个常数C，所以f(n)里一般不加系数。如果把T(n)当做一棵树，那么O(f(n))所表达的就是树干，只关心其中的主干，其他的细枝末节全都抛弃不管。 算法中语句执行次数为一个常数，则时间复杂度为O(1) 按数量级递增排列，常见的时间复杂度有：常数阶O(1),对数阶O(log n),线性阶O(n), 线性对数阶O((n * log n),平方阶O(n^2)，立方阶O(n^3),&amp;hellip;， k次方阶O(n^k),指数阶O(2^n)。 复杂度举例：</description>
    </item>
    
  </channel>
</rss>
