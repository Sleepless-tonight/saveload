<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>3、Design Patterns on Save Load</title>
    <link>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/</link>
    <description>Recent content in 3、Design Patterns on Save Load</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-Design-Patterns/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-Design-Patterns/</guid>
      <description> 设计模式 Design Patterns 学习自：
http://www.cyc2018.xyz/
一、前言 设计模式是解决问题的方案，学习现有的设计模式可以做到经验复用。拥有设计模式词汇，在沟通时就能用更少的词汇来讨论，并且不需要了解底层细节。（面对相似问题的经典解决方案）
创建型：如何创建对象
结构型：如何将多个对象组件成更大的对象，就像发动机、就像汽车
行为型：如果处理 对象 与 对象的关系，也就是说，当两个分开的对象，如何通过信息沟通，各自处理问题，以及 信息沟通的拓扑结构
Thinking In Java 里面总结：
将保持不变的东西身上发生的变化孤立出来 变化的影响隔离出来 设计范式：可以说对问题不变的地方抽象总结 二、创建型 单例 简单工厂 工厂方法 抽象工厂 生成器 原型模式 三、行为型 责任链 命令 解释器 迭代器 中介者 备忘录 观察者 状态 策略 模板方法 访问者 空对象 四、结构型 适配器 桥接 组合 装饰 外观 享元 代理 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80%E5%88%9B%E5%BB%BA%E5%9E%8B1%E5%8D%95%E4%BE%8BSingleton/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80%E5%88%9B%E5%BB%BA%E5%9E%8B1%E5%8D%95%E4%BE%8BSingleton/</guid>
      <description>1、单例（Singleton） Intent 确保一个类只有一个实例，并提供该实例的全局访问点。
Class Diagram 使用一个私有构造函数、一个私有静态变量以及一个公有静态函数来实现。
私有构造函数保证了不能通过构造函数来创建对象实例，只能通过公有静态函数返回唯一的私有静态变量。
Implementation Ⅰ 懒汉式-线程不安全 以下实现中，私有静态变量 uniqueInstance 被延迟实例化，这样做的好处是，如果没有用到该类，那么就不会实例化 uniqueInstance，从而节约资源。
这个实现在多线程环境下是不安全的，如果多个线程能够同时进入 if (uniqueInstance == null) ，并且此时 uniqueInstance 为 null，那么会有多个线程执行 uniqueInstance = new Singleton(); 语句，这将导致实例化多次 uniqueInstance
public class Singleton { private static Singleton uniqueInstance; private Singleton() { } public static Singleton getUniqueInstance() { if (uniqueInstance == null) { uniqueInstance = new Singleton(); } return uniqueInstance; } } Ⅱ 饿汉式-线程安全 线程不安全问题主要是由于 uniqueInstance 被实例化多次，采取直接实例化 uniqueInstance 的方式就不会产生线程不安全问题。
但是直接实例化的方式也丢失了延迟实例化带来的节约资源的好处。
private static Singleton uniqueInstance = new Singleton(); Ⅲ 懒汉式-线程安全 只需要对 getUniqueInstance() 方法加锁，那么在一个时间点只能有一个线程能够进入该方法，从而避免了实例化多次 uniqueInstance。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80%E5%88%9B%E5%BB%BA%E5%9E%8B2%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82Simple-Factory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80%E5%88%9B%E5%BB%BA%E5%9E%8B2%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82Simple-Factory/</guid>
      <description>2、简单工厂（Simple Factory） Intent 在创建一个对象时不向客户暴露内部细节，并提供一个创建对象的通用接口。
Class Diagram 简单工厂把实例化的操作单独放到一个类中，这个类就成为简单工厂类，让简单工厂类来决定应该用哪个具体子类来实例化。
这样做能把客户类和具体子类的实现解耦，客户类不再需要知道有哪些子类以及应当实例化哪个子类。客户类往往有多个，如果不使用简单工厂，那么所有的客户类都要知道所有子类的细节。而且一旦子类发生改变，例如增加子类，那么所有的客户类都要进行修改。
Implementation public interface Product { } public class ConcreteProduct implements Product { } public class ConcreteProduct1 implements Product { } public class ConcreteProduct2 implements Product { } 以下的 Client 类包含了实例化的代码，这是一种错误的实现。如果在客户类中存在这种实例化代码，就需要考虑将代码放到简单工厂中。
public class Client { public static void main(String[] args) { int type = 1; Product product; if (type == 1) { product = new ConcreteProduct1(); } else if (type == 2) { product = new ConcreteProduct2(); } else { product = new ConcreteProduct(); } // do something with the product } } 以下的 SimpleFactory 是简单工厂实现，它被所有需要进行实例化的客户类调用。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80%E5%88%9B%E5%BB%BA%E5%9E%8B3%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95Factory-Method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80%E5%88%9B%E5%BB%BA%E5%9E%8B3%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95Factory-Method/</guid>
      <description> 3、工厂方法（Factory Method） Intent 定义了一个创建对象的接口，但由子类决定要实例化哪个类。工厂方法把实例化操作推迟到子类。
Class Diagram 在简单工厂中，创建对象的是另一个类，而在工厂方法中，是由子类来创建对象。
下图中，Factory 有一个 doSomething() 方法，这个方法需要用到一个产品对象，这个产品对象由 factoryMethod() 方法创建。该方法是抽象的，需要由子类去实现。
Implementation public abstract class Factory { abstract public Product factoryMethod(); public void doSomething() { Product product = factoryMethod(); // do something with the product } } public class ConcreteFactory extends Factory { public Product factoryMethod() { return new ConcreteProduct(); } } public class ConcreteFactory1 extends Factory { public Product factoryMethod() { return new ConcreteProduct1(); } } public class ConcreteFactory2 extends Factory { public Product factoryMethod() { return new ConcreteProduct2(); } } </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80%E5%88%9B%E5%BB%BA%E5%9E%8B4%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82Abstract-Factory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80%E5%88%9B%E5%BB%BA%E5%9E%8B4%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82Abstract-Factory/</guid>
      <description>4、抽象工厂（Abstract Factory） Intent 提供一个接口，用于创建 相关的对象家族 。
Class Diagram 抽象工厂模式创建的是对象家族，也就是很多对象而不是一个对象，并且这些对象是相关的，也就是说必须一起创建出来。而工厂方法模式只是用于创建一个对象，这和抽象工厂模式有很大不同。
抽象工厂模式用到了工厂方法模式来创建单一对象，AbstractFactory 中的 createProductA() 和 createProductB() 方法都是让子类来实现，这两个方法单独来看就是在创建一个对象，这符合工厂方法模式的定义。
至于创建对象的家族这一概念是在 Client 体现，Client 要通过 AbstractFactory 同时调用两个方法来创建出两个对象，在这里这两个对象就有很大的相关性，Client 需要同时创建出这两个对象。
从高层次来看，抽象工厂使用了组合，即 Cilent 组合了 AbstractFactory，而工厂方法模式使用了继承。
Implementation public class AbstractProductA { } public class AbstractProductB { } public class ProductA1 extends AbstractProductA { } public class ProductA2 extends AbstractProductA { } public class ProductB1 extends AbstractProductB { } public class ProductB2 extends AbstractProductB { } public abstract class AbstractFactory { abstract AbstractProductA createProductA(); abstract AbstractProductB createProductB(); } public class ConcreteFactory1 extends AbstractFactory { AbstractProductA createProductA() { return new ProductA1(); } AbstractProductB createProductB() { return new ProductB1(); } } public class ConcreteFactory2 extends AbstractFactory { AbstractProductA createProductA() { return new ProductA2(); } AbstractProductB createProductB() { return new ProductB2(); } } public class Client { public static void main(String[] args) { AbstractFactory abstractFactory = new ConcreteFactory1(); AbstractProductA productA = abstractFactory.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80%E5%88%9B%E5%BB%BA%E5%9E%8B5%E7%94%9F%E6%88%90%E5%99%A8Builder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80%E5%88%9B%E5%BB%BA%E5%9E%8B5%E7%94%9F%E6%88%90%E5%99%A8Builder/</guid>
      <description>5、生成器（Builder） Intent 封装一个对象的构造过程，并允许按步骤构造。
Class Diagram Implementation 以下是一个简易的 StringBuilder 实现，参考了 JDK 1.8 源码。
public class AbstractStringBuilder { protected char[] value; protected int count; public AbstractStringBuilder(int capacity) { count = 0; value = new char[capacity]; } public AbstractStringBuilder append(char c) { ensureCapacityInternal(count + 1); value[count++] = c; return this; } private void ensureCapacityInternal(int minimumCapacity) { // overflow-conscious code if (minimumCapacity - value.length &amp;gt; 0) expandCapacity(minimumCapacity); } void expandCapacity(int minimumCapacity) { int newCapacity = value.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80%E5%88%9B%E5%BB%BA%E5%9E%8B6%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8FPrototype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80%E5%88%9B%E5%BB%BA%E5%9E%8B6%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8FPrototype/</guid>
      <description> 6、原型模式（Prototype） Intent 使用原型实例指定要创建对象的类型，通过复制这个原型来创建新对象。
Class Diagram Implementation public abstract class Prototype { abstract Prototype myClone(); } public class ConcretePrototype extends Prototype { private String filed; public ConcretePrototype(String filed) { this.filed = filed; } @Override Prototype myClone() { return new ConcretePrototype(filed); } @Override public String toString() { return filed; } } public class Client { public static void main(String[] args) { Prototype prototype = new ConcretePrototype(&amp;#34;abc&amp;#34;); Prototype clone = prototype.myClone(); System.out.println(clone.toString()); } } abc </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%89%E7%BB%93%E6%9E%84%E5%9E%8B1-%E9%80%82%E9%85%8D%E5%99%A8Adapter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%89%E7%BB%93%E6%9E%84%E5%9E%8B1-%E9%80%82%E9%85%8D%E5%99%A8Adapter/</guid>
      <description>1、适配器（Adapter） Intent 把一个类接口转换成另一个用户需要的接口。
Java 的 IO 流设计就有利用适配器模式，将不同来源的数据转为字节流或字符流
Class Diagram Implementation 鸭子（Duck）和火鸡（Turkey）拥有不同的叫声，Duck 的叫声调用 quack() 方法，而 Turkey 调用 gobble() 方法。
要求将 Turkey 的 gobble() 方法适配成 Duck 的 quack() 方法，从而让火鸡冒充鸭子！
public interface Duck { void quack(); } public interface Turkey { void gobble(); } public class WildTurkey implements Turkey { @Override public void gobble() { System.out.println(&amp;#34;gobble!&amp;#34;); } } public class TurkeyAdapter implements Duck { Turkey turkey; public TurkeyAdapter(Turkey turkey) { this.turkey = turkey; } @Override public void quack() { turkey.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%89%E7%BB%93%E6%9E%84%E5%9E%8B2-%E6%A1%A5%E6%8E%A5Bridge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%89%E7%BB%93%E6%9E%84%E5%9E%8B2-%E6%A1%A5%E6%8E%A5Bridge/</guid>
      <description>2、 桥接（Bridge） Intent 将抽象与实现分离开来，使它们可以独立变化。
Class Diagram Abstraction：定义抽象类的接口 Implementor：定义实现类接口 Implementation RemoteControl 表示遥控器，指代 Abstraction。
TV 表示电视，指代 Implementor。
桥接模式将遥控器和电视分离开来，从而可以独立改变遥控器或者电视的实现。
public abstract class TV { public abstract void on(); public abstract void off(); public abstract void tuneChannel(); } public class Sony extends TV { @Override public void on() { System.out.println(&amp;#34;Sony.on()&amp;#34;); } @Override public void off() { System.out.println(&amp;#34;Sony.off()&amp;#34;); } @Override public void tuneChannel() { System.out.println(&amp;#34;Sony.tuneChannel()&amp;#34;); } } public class RCA extends TV { @Override public void on() { System.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%89%E7%BB%93%E6%9E%84%E5%9E%8B3-%E7%BB%84%E5%90%88Composite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%89%E7%BB%93%E6%9E%84%E5%9E%8B3-%E7%BB%84%E5%90%88Composite/</guid>
      <description>3、 组合（Composite） Intent 将对象组合成树形结构来表示“整体/部分”层次关系，允许用户以相同的方式处理单独对象和组合对象。
Class Diagram 组件（Component）类是组合类（Composite）和叶子类（Leaf）的父类，可以把组合类看成是树的中间节点。
组合对象拥有一个或者多个组件对象，因此组合对象的操作可以委托给组件对象去处理，而组件对象可以是另一个组合对象或者叶子对象。
Implementation RemoteControl 表示遥控器，指代 Abstraction。
TV 表示电视，指代 Implementor。
桥接模式将遥控器和电视分离开来，从而可以独立改变遥控器或者电视的实现。
public abstract class Component { protected String name; public Component(String name) { this.name = name; } public void print() { print(0); } abstract void print(int level); abstract public void add(Component component); abstract public void remove(Component component); } public class Composite extends Component { private List&amp;lt;Component&amp;gt; child; public Composite(String name) { super(name); child = new ArrayList&amp;lt;&amp;gt;(); } @Override void print(int level) { for (int i = 0; i &amp;lt; level; i++) { System.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%89%E7%BB%93%E6%9E%84%E5%9E%8B4-%E8%A3%85%E9%A5%B0Decorator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%89%E7%BB%93%E6%9E%84%E5%9E%8B4-%E8%A3%85%E9%A5%B0Decorator/</guid>
      <description>4、 装饰（Decorator） Intent 为对象动态添加功能。
Class Diagram 装饰者（Decorator）和具体组件（ConcreteComponent）都继承自组件（Component），具体组件的方法实现不需要依赖于其它对象，而装饰者组合了一个组件，这样它可以装饰其它装饰者或者具体组件。所谓装饰，就是把这个装饰者套在被装饰者之上，从而动态扩展被装饰者的功能。装饰者的方法有一部分是自己的，这属于它的功能，然后调用被装饰者的方法实现，从而也保留了被装饰者的功能。可以看到，具体组件应当是装饰层次的最低层，因为只有具体组件的方法实现不需要依赖于其它对象。
Implementation 设计不同种类的饮料，饮料可以添加配料，比如可以添加牛奶，并且支持动态添加新配料。每增加一种配料，该饮料的价格就会增加，要求计算一种饮料的价格。
下图表示在 DarkRoast 饮料上新增新添加 Mocha 配料，之后又添加了 Whip 配料。DarkRoast 被 Mocha 包裹，Mocha 又被 Whip 包裹。它们都继承自相同父类，都有 cost() 方法，外层类的 cost() 方法调用了内层类的 cost() 方法。
/** * 饮料 */ public interface Beverage { /** * 费用，成本 * @return */ double cost(); } /** * 焦炒咖啡 */ public class DarkRoast implements Beverage { @Override public double cost() { return 1; } } /** * 首选咖啡 */ public class HouseBlend implements Beverage { @Override public double cost() { return 1; } } /** * 调味品装饰 */ public abstract class CondimentDecorator implements Beverage { protected Beverage beverage; } public class Milk extends CondimentDecorator { public Milk(Beverage beverage) { this.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%89%E7%BB%93%E6%9E%84%E5%9E%8B5-%E5%A4%96%E8%A7%82Facade/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%89%E7%BB%93%E6%9E%84%E5%9E%8B5-%E5%A4%96%E8%A7%82Facade/</guid>
      <description>5、 外观（Facade） Intent 提供了一个统一的接口，用来访问子系统中的一群接口，从而让子系统更容易使用。
Class Diagram Implementation 观看电影需要操作很多电器，使用外观模式实现一键看电影功能。
public class SubSystem { public void turnOnTV() { System.out.println(&amp;#34;turnOnTV()&amp;#34;); } public void setCD(String cd) { System.out.println(&amp;#34;setCD( &amp;#34; + cd + &amp;#34; )&amp;#34;); } public void startWatching(){ System.out.println(&amp;#34;startWatching()&amp;#34;); } } public class Facade { private SubSystem subSystem = new SubSystem(); public void watchMovie() { subSystem.turnOnTV(); subSystem.setCD(&amp;#34;a movie&amp;#34;); subSystem.startWatching(); } } public class Client { public static void main(String[] args) { Facade facade = new Facade(); facade.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%89%E7%BB%93%E6%9E%84%E5%9E%8B6-%E4%BA%AB%E5%85%83Flyweight/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%89%E7%BB%93%E6%9E%84%E5%9E%8B6-%E4%BA%AB%E5%85%83Flyweight/</guid>
      <description>6、 享元（Flyweight） Intent 利用共享的方式来支持大量细粒度的对象，这些对象一部分内部状态是相同的。
Class Diagram Flyweight：享元对象 IntrinsicState：内部状态，享元对象共享内部状态 ExtrinsicState：外部状态，每个享元对象的外部状态不同
Implementation Flyweight：享元对象 IntrinsicState：内部状态，享元对象共享内部状态 ExtrinsicState：外部状态，每个享元对象的外部状态不同 public interface Flyweight { void doOperation(String extrinsicState); } public class ConcreteFlyweight implements Flyweight { private String intrinsicState; public ConcreteFlyweight(String intrinsicState) { this.intrinsicState = intrinsicState; } @Override public void doOperation(String extrinsicState) { System.out.println(&amp;#34;Object address: &amp;#34; + System.identityHashCode(this)); System.out.println(&amp;#34;IntrinsicState: &amp;#34; + intrinsicState); System.out.println(&amp;#34;ExtrinsicState: &amp;#34; + extrinsicState); } } public class FlyweightFactory { private HashMap&amp;lt;String, Flyweight&amp;gt; flyweights = new HashMap&amp;lt;&amp;gt;(); Flyweight getFlyweight(String intrinsicState) { if (!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%89%E7%BB%93%E6%9E%84%E5%9E%8B7-%E4%BB%A3%E7%90%86Proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%89%E7%BB%93%E6%9E%84%E5%9E%8B7-%E4%BB%A3%E7%90%86Proxy/</guid>
      <description>7、 代理（Proxy） Intent 控制对其它对象的访问。
Class Diagram 远程代理（Remote Proxy）：控制对远程对象（不同地址空间）的访问，它负责将请求及其参数进行编码，并向不同地址空间中的对象发送已经编码的请求。 虚拟代理（Virtual Proxy）：根据需要创建开销很大的对象，它可以缓存实体的附加信息，以便延迟对它的访问，例如在网站加载一个很大图片时，不能马上完成，可以用虚拟代理缓存图片的大小信息，然后生成一张临时图片代替原始图片。 保护代理（Protection Proxy）：按权限控制对象的访问，它负责检查调用者是否具有实现一个请求所必须的访问权限。 智能代理（Smart Reference）：取代了简单的指针，它在访问对象时执行一些附加操作：记录对象的引用次数；当第一次引用一个对象时，将它装入内存；在访问一个实际对象前，检查是否已经锁定了它，以确保其它对象不能改变它。 Implementation 以下是一个虚拟代理的实现，模拟了图片延迟加载的情况下使用与图片大小相等的临时内容去替换原始图片，直到图片加载完成才将图片显示出来。
public interface Image { void showImage(); } public class HighResolutionImage implements Image { private URL imageURL; private long startTime; private int height; private int width; public int getHeight() { return height; } public int getWidth() { return width; } public HighResolutionImage(URL imageURL) { this.imageURL = imageURL; this.startTime = System.currentTimeMillis(); this.width = 600; this.height = 600; } public boolean isLoad() { // 模拟图片加载，延迟 3s 加载完成 long endTime = System.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C%E8%A1%8C%E4%B8%BA%E5%9E%8B10-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95Template-Method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C%E8%A1%8C%E4%B8%BA%E5%9E%8B10-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95Template-Method/</guid>
      <description>10、 模板方法（Template Method） Intent 定义算法框架，并将一些步骤的实现延迟到子类。
通过模板方法，子类可以重新定义算法的某些步骤，而不用改变算法的结构。
Class Diagram Implementation 冲咖啡和冲茶都有类似的流程，但是某些步骤会有点不一样，要求复用那些相同步骤的代码。 public abstract class CaffeineBeverage { final void prepareRecipe() { boilWater(); brew(); pourInCup(); addCondiments(); } abstract void brew(); abstract void addCondiments(); void boilWater() { System.out.println(&amp;#34;boilWater&amp;#34;); } void pourInCup() { System.out.println(&amp;#34;pourInCup&amp;#34;); } } public class Coffee extends CaffeineBeverage { @Override void brew() { System.out.println(&amp;#34;Coffee.brew&amp;#34;); } @Override void addCondiments() { System.out.println(&amp;#34;Coffee.addCondiments&amp;#34;); } } public class Tea extends CaffeineBeverage { @Override void brew() { System.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C%E8%A1%8C%E4%B8%BA%E5%9E%8B11-%E8%AE%BF%E9%97%AE%E8%80%85Visitor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C%E8%A1%8C%E4%B8%BA%E5%9E%8B11-%E8%AE%BF%E9%97%AE%E8%80%85Visitor/</guid>
      <description>11、 访问者（Visitor） Intent 为一个对象结构（比如组合结构）增加新能力。
Class Diagram Visitor：访问者，为每一个 ConcreteElement 声明一个 visit 操作 ConcreteVisitor：具体访问者，存储遍历过程中的累计结果 ObjectStructure：对象结构，可以是组合结构，或者是一个集合。 Implementation /** * Visitor：访问者，为每一个 ConcreteElement 声明一个 visit 操作 */ public interface Visitor { /** * 访问，参观； * @param customer 顾客 */ void visit(Customer customer); void visit(Order order); void visit(Item item); } /** * 具体访问者，存储遍历过程中的累计结果 */ public class GeneralReport implements Visitor { private int customersNo; private int ordersNo; private int itemsNo; public void visit(Customer customer) { System.out.println(customer.getName()); customersNo++; } public void visit(Order order) { System.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C%E8%A1%8C%E4%B8%BA%E5%9E%8B12-%E7%A9%BA%E5%AF%B9%E8%B1%A1Null/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C%E8%A1%8C%E4%B8%BA%E5%9E%8B12-%E7%A9%BA%E5%AF%B9%E8%B1%A1Null/</guid>
      <description>12、 空对象（Null） Intent 使用什么都不做
的空对象来代替 NULL。
一个方法返回 NULL，意味着方法的调用端需要去检查返回值是否是 NULL，这么做会导致非常多的冗余的检查代码。并且如果某一个调用端忘记了做这个检查返回值，而直接使用返回的对象，那么就有可能抛出空指针异常。
Class Diagram Implementation public abstract class AbstractOperation { abstract void request(); } public class RealOperation extends AbstractOperation { @Override void request() { System.out.println(&amp;#34;do something&amp;#34;); } } public class NullOperation extends AbstractOperation{ @Override void request() { // do nothing } } public class Client { public static void main(String[] args) { AbstractOperation abstractOperation = func(-1); abstractOperation.request(); } public static AbstractOperation func(int para) { if (para &amp;lt; 0) { return new NullOperation(); } return new RealOperation(); } } boilWater
Coffee.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C%E8%A1%8C%E4%B8%BA%E5%9E%8B1%E8%B4%A3%E4%BB%BB%E9%93%BEChain-Of-Responsibility/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C%E8%A1%8C%E4%B8%BA%E5%9E%8B1%E8%B4%A3%E4%BB%BB%E9%93%BEChain-Of-Responsibility/</guid>
      <description>1、责任链（Chain Of Responsibility） Intent 使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链发送该请求，直到有一个对象处理它为止。
Class Diagram Handler：定义处理请求的接口，并且实现后继链（successor） Implementation public abstract class Handler { protected Handler successor; public Handler(Handler successor) { this.successor = successor; } protected abstract void handleRequest(Request request); } public class ConcreteHandler1 extends Handler { public ConcreteHandler1(Handler successor) { super(successor); } @Override protected void handleRequest(Request request) { if (request.getType() == RequestType.TYPE1) { System.out.println(request.getName() + &amp;#34; is handle by ConcreteHandler1&amp;#34;); return; } if (successor != null) { successor.handleRequest(request); } } } public class ConcreteHandler2 extends Handler { public ConcreteHandler2(Handler successor) { super(successor); } @Override protected void handleRequest(Request request) { if (request.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C%E8%A1%8C%E4%B8%BA%E5%9E%8B2%E5%91%BD%E4%BB%A4Command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C%E8%A1%8C%E4%B8%BA%E5%9E%8B2%E5%91%BD%E4%BB%A4Command/</guid>
      <description>2、命令（Command） Intent 将命令封装成对象中，具有以下作用：
使用命令来参数化其它对象 将命令放入队列中进行排队 将命令的操作记录到日志中 支持可撤销的操作 Class Diagram Command：命令 Receiver：命令接收者，也就是命令真正的执行者 Invoker：通过它来调用命令 Client：可以设置命令与命令的接收者 Implementation 设计一个遥控器，可以控制电灯开关。
public interface Command { void execute(); } public class LightOnCommand implements Command { Light light; public LightOnCommand(Light light) { this.light = light; } @Override public void execute() { light.on(); } } public class LightOffCommand implements Command { Light light; public LightOffCommand(Light light) { this.light = light; } @Override public void execute() { light.off(); } } public class Light { public void on() { System.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C%E8%A1%8C%E4%B8%BA%E5%9E%8B3%E8%A7%A3%E9%87%8A%E5%99%A8Interpreter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C%E8%A1%8C%E4%B8%BA%E5%9E%8B3%E8%A7%A3%E9%87%8A%E5%99%A8Interpreter/</guid>
      <description>3、解释器（Interpreter） Intent 为语言创建解释器，通常由语言的语法和语法分析来定义。
Class Diagram TerminalExpression：终结符表达式，每个终结符都需要一个 TerminalExpression。 Context：上下文，包含解释器之外的一些全局信息。 Implementation public interface Aggregate { Iterator createIterator(); } public class ConcreteAggregate implements Aggregate { private Integer[] items; public ConcreteAggregate() { items = new Integer[10]; for (int i = 0; i &amp;lt; items.length; i++) { items[i] = i; } } @Override public Iterator createIterator() { return new ConcreteIterator&amp;lt;Integer&amp;gt;(items); } } public interface Iterator&amp;lt;Item&amp;gt; { Item next(); boolean hasNext(); } public class ConcreteIterator&amp;lt;Item&amp;gt; implements Iterator { private Item[] items; private int position = 0; public ConcreteIterator(Item[] items) { this.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C%E8%A1%8C%E4%B8%BA%E5%9E%8B4%E8%BF%AD%E4%BB%A3%E5%99%A8Iterator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C%E8%A1%8C%E4%B8%BA%E5%9E%8B4%E8%BF%AD%E4%BB%A3%E5%99%A8Iterator/</guid>
      <description>4、迭代器（Iterator） Intent 提供一种顺序访问聚合对象元素的方法，并且不暴露聚合对象的内部表示。
Class Diagram Aggregate 是聚合类，其中 createIterator() 方法可以产生一个 Iterator； Iterator 主要定义了 hasNext() 和 next() 方法； Client 组合了 Aggregate，为了迭代遍历 Aggregate，也需要组合 Iterator。 Implementation 以下是一个规则检验器实现，具有 and 和 or 规则，通过规则可以构建一颗解析树，用来检验一个文本是否满足解析树定义的规则。
例如一颗解析树为 D And (A Or (B C))，文本 &amp;ldquo;D A&amp;rdquo; 满足该解析树定义的规则。
这里的 Context 指的是 String
public abstract class Expression { public abstract boolean interpret(String str); } public class TerminalExpression extends Expression { private String literal = null; public TerminalExpression(String str) { literal = str; } public boolean interpret(String str) { StringTokenizer st = new StringTokenizer(str); while (st.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C%E8%A1%8C%E4%B8%BA%E5%9E%8B5%E4%B8%AD%E4%BB%8B%E8%80%85Mediator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C%E8%A1%8C%E4%B8%BA%E5%9E%8B5%E4%B8%AD%E4%BB%8B%E8%80%85Mediator/</guid>
      <description>5、中介者（Mediator） Intent 集中相关对象之间复杂的沟通和控制方式。（改变多个对象间的拓扑结构）
Class Diagram Mediator：中介者，定义一个接口用于与各同事（Colleague）对象通信。 Colleague：同事，相关对象 Implementation Alarm（闹钟）、CoffeePot（咖啡壶）、Calendar（日历）、Sprinkler（喷头）是一组相关的对象，在某个对象的事件产生时需要去操作其它对象，形成了下面这种依赖结构：
使用中介者模式可以将复杂的依赖结构变成星形结构：
/** * Colleague 同事类 * Mediator 中介物 */ public abstract class Colleague { public abstract void onEvent(Mediator mediator); } public class Alarm extends Colleague { @Override public void onEvent(Mediator mediator) { mediator.doEvent(&amp;#34;alarm&amp;#34;); } public void doAlarm() { System.out.println(&amp;#34;doAlarm()&amp;#34;); } } public class CoffeePot extends Colleague { @Override public void onEvent(Mediator mediator) { mediator.doEvent(&amp;#34;coffeePot&amp;#34;); } public void doCoffeePot() { System.out.println(&amp;#34;doCoffeePot()&amp;#34;); } } public class Calender extends Colleague { @Override public void onEvent(Mediator mediator) { mediator.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C%E8%A1%8C%E4%B8%BA%E5%9E%8B6%E5%A4%87%E5%BF%98%E5%BD%95Memento/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C%E8%A1%8C%E4%B8%BA%E5%9E%8B6%E5%A4%87%E5%BF%98%E5%BD%95Memento/</guid>
      <description>6、备忘录（Memento） Intent 在不违反封装的情况下获得对象的内部状态，从而在需要时可以将对象恢复到最初状态。
Class Diagram Originator：原始对象 Caretaker：负责保存好备忘录 Memento：备忘录，存储原始对象的状态。备忘录实际上有两个接口，一个是提供给 Caretaker 的窄接口：它只能将备忘录传递给其它对象；一个是提供给 Originator 的宽接口，允许它访问到先前状态所需的所有数据。理想情况是只允许 Originator 访问本备忘录的内部状态。 Implementation 以下实现了一个简单计算器程序，可以输入两个值，然后计算这两个值的和。备忘录模式允许将这两个值存储起来，然后在某个时刻用存储的状态进行恢复。
/** * Originator Interface */ public interface Calculator { // Create Memento PreviousCalculationToCareTaker backupLastCalculation(); // setMemento void restorePreviousCalculation(PreviousCalculationToCareTaker memento); int getCalculationResult(); void setFirstNumber(int firstNumber); void setSecondNumber(int secondNumber); } /** * Originator Implementation */ public class CalculatorImp implements Calculator { private int firstNumber; private int secondNumber; @Override public PreviousCalculationToCareTaker backupLastCalculation() { // create a memento object used for restoring two numbers return new PreviousCalculationImp(firstNumber, secondNumber); } @Override public void restorePreviousCalculation(PreviousCalculationToCareTaker memento) { this.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C%E8%A1%8C%E4%B8%BA%E5%9E%8B7%E8%A7%82%E5%AF%9F%E8%80%85Observer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C%E8%A1%8C%E4%B8%BA%E5%9E%8B7%E8%A7%82%E5%AF%9F%E8%80%85Observer/</guid>
      <description>7、观察者（Observer） Intent 定义对象之间的一对多依赖，当一个对象状态改变时，它的所有依赖都会收到通知并且自动更新状态。
主题（Subject）是被观察的对象，而其所有依赖者（Observer）称为观察者。
Class Diagram 主题（Subject）具有注册和移除观察者、并通知所有观察者的功能，主题是通过维护一张观察者列表来实现这些操作的。 观察者（Observer）的注册功能需要调用主题的 registerObserver() 方法。 Implementation 天气数据布告板会在天气信息发生改变时更新其内容，布告板有多个，并且在将来会继续增加。
/** * 主题 */ public interface Subject { /** * 登记 观察者 * @param o */ void registerObserver(Observer o); /** * 删除 观察者 * @param o */ void removeObserver(Observer o); /** * 通知 观察者 */ void notifyObserver(); } public class WeatherData implements Subject { private List&amp;lt;Observer&amp;gt; observers; private float temperature; private float humidity; private float pressure; public WeatherData() { observers = new ArrayList&amp;lt;&amp;gt;(); } public void setMeasurements(float temperature, float humidity, float pressure) { this.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C%E8%A1%8C%E4%B8%BA%E5%9E%8B8%E7%8A%B6%E6%80%81State/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C%E8%A1%8C%E4%B8%BA%E5%9E%8B8%E7%8A%B6%E6%80%81State/</guid>
      <description>8、状态（State） Intent 允许对象在内部状态改变时改变它的行为，对象看起来好像修改了它所属的类。
Class Diagram Implementation 糖果销售机有多种状态，每种状态下销售机有不同的行为，状态可以发生转移，使得销售机的行为也发生改变。 public interface State { /** * 投入 25 分钱 */ void insertQuarter(); /** * 退回 25 分钱 */ void ejectQuarter(); /** * 转动曲柄 */ void turnCrank(); /** * 发放糖果 */ void dispense(); } public class HasQuarterState implements State { private GumballMachine gumballMachine; public HasQuarterState(GumballMachine gumballMachine) { this.gumballMachine = gumballMachine; } @Override public void insertQuarter() { System.out.println(&amp;#34;You can&amp;#39;t insert another quarter&amp;#34;); } @Override public void ejectQuarter() { System.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C%E8%A1%8C%E4%B8%BA%E5%9E%8B9-%E7%AD%96%E7%95%A5Strategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/2Computer-Science/3Design-Patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BA%8C%E8%A1%8C%E4%B8%BA%E5%9E%8B9-%E7%AD%96%E7%95%A5Strategy/</guid>
      <description>9、策略（Strategy） Intent 定义一系列算法，封装每个算法，并使它们可以互换。
策略模式可以让算法独立于使用它的客户端。
Class Diagram Strategy 接口定义了一个算法族，它们都实现了 behavior() 方法。 Context 是使用到该算法族的类，其中的 doSomething() 方法会调用 behavior()，setStrategy(Strategy) 方法可以动态地改变 strategy 对象，也就是说能动态地改变 Context 所使用的算法。 状态模式的类图和策略模式类似，并且都是能够动态改变对象的行为。但是状态模式是通过状态转移来改变 Context 所组合的 State 对象，而策略模式是通过 Context 本身的决策来改变组合的 Strategy 对象。所谓的状态转移，是指 Context 在运行过程中由于一些条件发生改变而使得 State 对象发生改变，注意必须要是在运行过程中。
状态模式主要是用来解决状态转移的问题，当状态发生转移了，那么 Context 对象就会改变它的行为；而策略模式主要是用来封装一组可以互相替代的算法族，并且可以根据需要动态地去替换 Context 使用的算法。
Implementation 设计一个鸭子，它可以动态地改变叫声。这里的算法族是鸭子的叫声行为。
public interface QuackBehavior { void quack(); } public class Quack implements QuackBehavior { @Override public void quack() { System.out.println(&amp;#34;quack!&amp;#34;); } } public class Squeak implements QuackBehavior{ @Override public void quack() { System.</description>
    </item>
    
  </channel>
</rss>
