<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>9、Archive on Save Load</title>
    <link>https://www.saveload.cn/Tech/9Archive/</link>
    <description>Recent content in 9、Archive on Save Load</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.saveload.cn/Tech/9Archive/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/9Archive/CPU-%E9%AB%98%E8%B4%9F%E8%BD%BD%E6%8E%92%E6%9F%A5%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/9Archive/CPU-%E9%AB%98%E8%B4%9F%E8%BD%BD%E6%8E%92%E6%9F%A5%E5%AE%9E%E8%B7%B5/</guid>
      <description>CPU 高负载排查实践 作者：crossoverJie
segmentfault.com/a/1190000019507028
问题分析 1、首先利用 top -c 将系统资源使用情况实时显示出来 （-c 参数可以完整显示命令）。获得Java应用 pid 接着输入大写 P 将应用按照 CPU 使用率排序，第一个就是使用率最高的程序。 常规操作第二步自然是得知道这个应用中最耗 CPU 的线程到底再干嘛。 2、利用 top -Hp pid 然后输入 P 依然可以按照 CPU 使用率将线程排序。**** pid 是第一步获得的，获得3步所需pid**** 3、这时我们只需要记住线程的 ID 将其转换为 16 进制存储起来，通过 jstack pid &amp;gt;pid.log 生成日志文件，利用刚才保存的 16 进制进程 ID 去这个线程快照中搜索即可知道消耗 CPU 的线程在干啥了。4856 如果你嫌麻烦，我也强烈推荐阿里开源的问题定位神器 arthas 来定位问题。 比如上述操作便可精简为一个命令 thread -n 3 即可将最忙碌的三个线程快照打印出来，非常高效。 最忙绿的线程是一个 GC 线程，也就意味着它在忙着做垃圾回收。 GC 查看 排查到这里，有经验的老司机一定会想到：多半是应用内存使用有问题导致的。 于是我通过 jstat -gcutil pid 200 50 将内存使用、gc 回收状况打印出来（每隔 200ms 打印 50次）。 内存分析 既然是初步定位是内存问题，所以还是得拿一份内存快照分析才能最终定位到问题。 通过命令 jmap -dump:live,format=b,file=dump.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/9Archive/Web-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AE%80%E5%8F%B2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/9Archive/Web-%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AE%80%E5%8F%B2/</guid>
      <description>Web 浏览器简史 标签：Web、浏览器、简史、 时间：2023年4月3日 14点16分 连接：https://www.mozilla.org/zh-CN/firefox/browsers/browser-history/ 世界历史从不缺少史诗般的权力斗争，有征服世界的暴君，也有落败的勇士。Web 浏览器的历史也大抵如此。学术先驱们编写出引发信息革命的简易软件，并为浏览器的优势和互联网用户而战。
前 Web 时代 1950 年，一台计算机要占据整个房间，性能却比不上现在的袖珍计算器。但技术发展日新月异，到了 1960 年，它们已能运行复杂的程序。全球各国政府和大学都认为，如果这些机器可以相互连通，以促进合作共赢和科学突破，那将是一件大好事。
阿帕网（ARPANET）是第一个成功的网络连接计划，1969 年，第一条消息从美国加州大学洛杉矶分校（UCLA）计算机科学实验室发送到同样位于加州的斯坦福研究院（Stanford Research Institute, SRI）。
由此，引发了计算机网络的一场革命。之后不同的网络相继建立，连接了全球的各所大学与研究中心。但在接下来的 20 年里，公众仍无法访问互联网，只有大学与政府机关内的研究人员、学生与私人企业可以使用。有许多程序可以通过电话线在计算机间交换信息，但都算不上好用。真正开放的互联网与第一款 Web 浏览器，直到 1990 年才显露雏形。
Web 时代 1990 年，英国计算机工程师蒂姆·伯纳斯·李（Tim Berners-Lee）在瑞士的欧洲核子研究组织（CERN）工作时，开发出首个 Web 服务器与图形化 Web 浏览器。他将这个进入互联网世界的新窗口，称为“WorldWideWeb”（即“万维网”）。这是一款为 NeXT 计算机开发的易于使用的图形化界面浏览器，超文本第一次通过公开网络被链接起来——即我们现在所熟知的 Web。
一年后，伯纳斯·李（Berners-Lee）委托 CERN 的数学系学生尼古拉·佩洛（Nicola Pellow）编写了“命令行模式浏览器”，这是一款可在简易计算机终端中使用的浏览器。
到了 1993 年，网络发展突飞猛进。 各所大学、政府机关、私人企业都看到了开放互联网中的机会，每个人都需要新的计算机程序来访问网络。 这一年，美国伊利诺伊大学厄巴纳-香槟分校的美国国家超级计算机应用中心（NCSA）的计算机科学家马克·安德森（Marc Andreessen）开发了 Mosaic，这是第一款流行的 Web 浏览器，也是 Mozilla Firefox 的早期版本。
NCSA Mosaic 易于使用，又可以在 Windows 计算机运行，让任何拥有 PC 的人都可以浏览早期的网页、聊天室、图库。隔年（1994 年），安德森创立 Netscape 并公开发行了 Netscape Navigator。这是第一款面向普通用户的浏览器，取得了巨大成功。 这也是针对互联网用户的新型战争的开端。
浏览器大战 来到 1995 年，Netscape Navigator 已不是上网冲浪的唯一选择。计算机软件巨头 Microsoft 获得了旧版 Mosaic 的代码授权，从而建立了自己的“Web 窗口”—— Internet Explorer。该浏览器的推出引发了战争。Netscape 与 Microsoft 竭力为各自的产品推出新版本，试图以更快、更好的产品来超越对方。</description>
    </item>
    
  </channel>
</rss>
