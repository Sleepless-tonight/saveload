<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">  <channel>    <title>Spring on Save Load</title>    <link>https://www.saveload.cn/Tech/3Java/Spring/</link>    <description>Recent content in Spring on Save Load</description>    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.saveload.cn/Tech/3Java/Spring/index.xml" rel="self" type="application/rss+xml" />    <item>      <title></title>      <link>https://www.saveload.cn/Tech/3Java/Spring/Base64/</link>      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>            <guid>https://www.saveload.cn/Tech/3Java/Spring/Base64/</guid>      <description>final Base64.Decoder decoder = Base64.getDecoder();final Base64.Encoder encoder = Base64.getEncoder();final String text = &amp;#34;字串文字&amp;#34;;final byte[] textByte = text.getBytes(&amp;#34;UTF-8&amp;#34;);//编码final String encodedText = encoder.encodeToString(textByte);System.out.println(encodedText);//解码System.out.println(new String(decoder.decode(encodedText), &amp;#34;UTF-8&amp;#34;));final Base64.Decoder decoder = Base64.getDecoder();final Base64.Encoder encoder = Base64.getEncoder();final String text = &amp;#34;字串文字&amp;#34;;final byte[] textByte = text.getBytes(&amp;#34;UTF-8&amp;#34;);//编码final String encodedText = encoder.encodeToString(textByte);System.out.println(encodedText);//解码System.out.println(new String(decoder.decode(encodedText), &amp;#34;UTF-8&amp;#34;)); </description>    </item>        <item>      <title></title>      <link>https://www.saveload.cn/Tech/3Java/Spring/logback-spring-%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/</link>      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>            <guid>https://www.saveload.cn/Tech/3Java/Spring/logback-spring-%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/</guid>      <description>logback-spring 基本配置说明 &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&amp;lt;configuration&amp;gt;&amp;lt;!-- 此xml在spring-boot-1.5.3.RELEASE.jar里 --&amp;gt;&amp;lt;include resource=&amp;#34;org/springframework/boot/logging/logback/defaults.xml&amp;#34; /&amp;gt;&amp;lt;include resource=&amp;#34;org/springframework/boot/logging/logback/console-appender.xml&amp;#34; /&amp;gt;&amp;lt;!-- 开启后可以通过jmx动态控制日志级别(springboot Admin的功能) --&amp;gt;&amp;lt;!--&amp;lt;jmxConfigurator/&amp;gt;--&amp;gt;&amp;lt;!-- RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 --&amp;gt;&amp;lt;!-- 以下的大概意思是：1.先按日期存日志，日期变了，将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是demo.log --&amp;gt;&amp;lt;!-- 2.如果日期没有发生变化，但是当前日志的文件大小超过10MB时，对当前日志进行分割 重命名--&amp;gt;&amp;lt;appender name=&amp;#34;FILE&amp;#34; class=&amp;#34;ch.qos.logback.core.rolling.RollingFileAppender&amp;#34;&amp;gt;&amp;lt;File&amp;gt;${LOG_PATH}${LOG_FILE}&amp;lt;/File&amp;gt;&amp;lt;encoder&amp;gt;&amp;lt;!-- pattern节点，用来设置日志的输入格式 --&amp;gt;&amp;lt;pattern&amp;gt;%date [%level] [%thread] %logger{60} [%file : %line] %msg%n&amp;lt;/pattern&amp;gt;&amp;lt;!-- 记录日志的编码:此处设置字符集 - --&amp;gt;&amp;lt;charset&amp;gt;UTF-8&amp;lt;/charset&amp;gt;&amp;lt;/encoder&amp;gt;&amp;lt;!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 --&amp;gt;&amp;lt;!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 --&amp;gt;&amp;lt;rollingPolicy class=&amp;#34;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&amp;#34;&amp;gt;&amp;lt;!-- 添加.gz 历史日志会启用压缩 大大缩小日志文件所占空间 --&amp;gt;&amp;lt;!-- 文件名：logs/daily/guns.log.2017-12-05.0.gz --&amp;gt;&amp;lt;fileNamePattern&amp;gt;${LOG_PATH}daily/${LOG_FILE}.</description>    </item>        <item>      <title></title>      <link>https://www.saveload.cn/Tech/3Java/Spring/Spring-Boot-Security/</link>      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>            <guid>https://www.saveload.cn/Tech/3Java/Spring/Spring-Boot-Security/</guid>      <description>Hello World Spring Boot Security 创建Spring Security 配置：configureGlobal方法的名称并不重要。然而，仅在与任何注释的类配置AuthenticationManagerBuilder是很重要的@EnableWebSecurity，@EnableGlobalMethodSecurity或@EnableGlobalAuthentication。否则会产生不可预测的结果。自定义身份验证管理器：AuthenticationManagerBuilder 非常适合设置内存，JDBC或LDAP用户详细信息，或用于添加自定义UserDetailsService。以下是配置全局（父）的应用程序示例AuthenticationManager：认证身份验证的主要策略接口 AuthenticationManager 只有一个方法：authenticate@EnableWebSecuritypublic class SecurityConfig extends WebSecurityConfigurerAdapter {@Overrideprotected void configure(HttpSecurity http) throws Exception {http.authorizeRequests().antMatchers(&amp;#34;/css/**&amp;#34;, &amp;#34;/index&amp;#34;).permitAll()	.antMatchers(&amp;#34;/user/**&amp;#34;).hasRole(&amp;#34;USER&amp;#34;)	.and().formLogin().loginPage(&amp;#34;/login&amp;#34;).failureUrl(&amp;#34;/login-error&amp;#34;);	}@Autowiredpublic void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {auth.inMemoryAuthentication().withUser(&amp;#34;user&amp;#34;).password(&amp;#34;password&amp;#34;).roles(&amp;#34;USER&amp;#34;);}} 请注意，它AuthenticationManagerBuilder是@Autowired一个方法@Bean- 这是使它构建全局（父）的方法AuthenticationManager。相反，如果我们这样做：@Configurationpublic class ApplicationSecurity extends WebSecurityConfigurerAdapter {@AutowiredDataSource dataSource;... // web stuff here@Overridepublic configure(AuthenticationManagerBuilder builder) {builder.</description>    </item>        <item>      <title></title>      <link>https://www.saveload.cn/Tech/3Java/Spring/Spring-Boot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-%E5%A4%9A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link>      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>            <guid>https://www.saveload.cn/Tech/3Java/Spring/Spring-Boot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6-%E5%A4%9A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid>      <description>Spring Boot配置文件-多配置文件 1.properties多环境配置 1、第一种：利用@PropertySource注解既可以引入配置文件，需要引入多个时，可使用@PropertySources设置数组，引入多个文件。@SpringBootApplication@PropertySource(value= &amp;#34;classpath:application-my.properties&amp;#34;,encoding=&amp;#34;utf-8&amp;#34;)@ComponentScan(basePackages = {&amp;#34;com.nostyling&amp;#34;})@ServletComponentScan(value = &amp;#34;com.nostyling&amp;#34;)@MapperScan(basePackages = {&amp;#34;com.nostyling.create.modular.dao&amp;#34;})//将项目中对应的mapper类的路径加进来就可以了public class DemoApplication {private static Logger logger = LoggerFactory.getLogger(DemoApplication.class);public static void main(String[] args) {SpringApplication.run(DemoApplication.class, args);logger.info(&amp;#34;成功启动！&amp;#34;);}} 2、第二种：配置激活选项我们将多个资源文件放入到resource目录下application.propertiesapplication-dev.propertiesapplication-test.propertiesapplication-master.properties 在 application.properties文件中做如下配置：#激活哪一个环境的配置文件spring.profiles.active=dev#公共配置spring.jackson.date-format=yyyy-MM-dd HH:mm:ss: 2.YAML多环境配置 注意：@PropertySource注解只支持properties文件。而不支持yml文件。1、第一种：使用yml的配置文件，名称一定以application-开头，例如：application-dev.yml，application-pro.yml，application-redis.yml文件等你等。我们将多个资源文件放入到resource目录下application.ymlapplication-dev.ymlapplication-test.ymlapplication-master.yml 在 application.yml 文件中配置激活选项：spring:profiles:# （这里只写application-之后的名称。多个之间用逗号分隔）active: dev 2、第二种：在配置文件添加三个英文状态下的短横线即可区分例如：</description>    </item>        <item>      <title></title>      <link>https://www.saveload.cn/Tech/3Java/Spring/Spring-%E6%B3%A8%E8%A7%A3/</link>      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>            <guid>https://www.saveload.cn/Tech/3Java/Spring/Spring-%E6%B3%A8%E8%A7%A3/</guid>      <description>Spring 注解 @Value 注入 String yml populate:string: stringValue 注入 @Value(&amp;#34;${populate.string2:}&amp;#34;)	// 默认值是空字符串“”private String stringV;@Value(&amp;#34;${populate.string:null}&amp;#34;)	// 默认值是nullprivate String stringV2;@Value(&amp;#34;${populate.string:defaultValue}&amp;#34;)	// 默认值是“defaultValue”private String stringV3;@Value(&amp;#34;#{&amp;#39;${allowNameRepetitionPlatformCode:0}&amp;#39;.split(&amp;#39;,&amp;#39;)}&amp;#34;)private List&amp;lt;String&amp;gt; allowNameRepetitionPlatformCode;private List&amp;lt;Long&amp;gt; allowNameRepetitionPlatformCode;// 在 yml 文件未对 allowNameRepetitionPlatformCode 配置时，allowNameRepetitionPlatformCode 属性加载默认值，[0], 在 yml 做了相应配置时，属性值为 配置结果，不加载默认值。 注入 Array yml populate:array: array1,array2,array3 注入 @Value(&amp;#34;${populate.array:}&amp;#34;) // 默认值是[]private String[] array;@Value(&amp;#34;${populate.array:a1,a2,a3}&amp;#34;) // 默认值是[a1,a2,a3]private String[] array1; 注入 List yml populate:list: list1,list2,list3 注入 #{&amp;rsquo;${populate.</description>    </item>        <item>      <title></title>      <link>https://www.saveload.cn/Tech/3Java/Spring/Spring-1-%E6%A6%82%E5%BF%B5/</link>      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>            <guid>https://www.saveload.cn/Tech/3Java/Spring/Spring-1-%E6%A6%82%E5%BF%B5/</guid>      <description>设计理念 提供各个层面的选择。Spring 允许您尽可能推迟设计决策。例如，可以通过配置切换持久性提供程序，而无需更改代码。对于许多其他基础架构问题以及与第三方 API 的集成也是如此。 核心技术 Ioc 和 DI 和 POI Ioc DI POI Ioc 和 DI 框架的一个重要特征是用户定义的用于定制框架的方法通常从框架本身调用，而不是从用户的应用程序代码调用。该框架通常在协调和排序应用程序活动中扮演主要程序的角色。这种控制反转使框架具有作为可扩展骨架的能力。用户提供的方法定制框架中为特定应用程序定义的通用算法。库本质上是一组可以调用的函数。框架体现了一些抽象设计，内置了更多行为。为了使用它，您需要通过子类化或插入自己的类将行为插入到框架中的各个位置。然后框架的代码在这些点上调用您的代码。我将方法的控制权交给了框架系统。然后根据我对框架所做的设定，决定何时调用我的方法。控制被颠倒了 - 它叫我而不是我调用框架。这种现象是控制倒置（也称为好莱坞原则 - “不要打电话给我们，我们会打电话给你”）。它执行调用，您的代码作出反应 - 所以再次控制被反转。（个人总结：将 控制反转 称为 反向控制 就容易理解的多了。。。）Spring所倡导的开发方式就是如此，所有的类都会在spring容器中登记，告诉spring你是个什么东西，你需要什么东西，然后spring会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。所有的类的创建、销毁都由 spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被spring控制，所以这叫控制反转。控制的什么被反转了？就是：获得依赖对象的方式反转了。传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。IoC 的一个重点是在系统运行中，动态的向某个对象提供它所需要的其他对象。这一点是通过 DI（Dependency Injection，依赖注入）来实现的。DI 是如何实现的呢？ Java 1.3之后一个重要特征是反射（reflection），它允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性，spring就是通过反射来实现注入的。来自：https://www.martinfowler.com/bliki/InversionOfControl.htmlIoc 和 DI 和 POI 控制反转和依赖注入是框架的特性，而 spring 的核心的精神是依赖注入！！！</description>    </item>        <item>      <title></title>      <link>https://www.saveload.cn/Tech/3Java/Spring/springMVC/</link>      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>            <guid>https://www.saveload.cn/Tech/3Java/Spring/springMVC/</guid>      <description>springMVC HandlerMethod 类：简单来说HandlerMethod包含的信息包括类、方法和参数的一个信息类。</description>    </item>        <item>      <title></title>      <link>https://www.saveload.cn/Tech/3Java/Spring/Spring%E4%BA%8B%E5%8A%A1/</link>      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>            <guid>https://www.saveload.cn/Tech/3Java/Spring/Spring%E4%BA%8B%E5%8A%A1/</guid>      <description>SpringAOP 代理的实现过程；事务管理也是AOP的一个重要的功能。</description>    </item>        <item>      <title></title>      <link>https://www.saveload.cn/Tech/3Java/Spring/%E5%9F%BA%E4%BA%8ESpringBoot-AOP%E6%9D%A1%E4%BB%B6%E4%B8%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9E%E7%8E%B0%E6%B3%A8%E8%A7%A3/</link>      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>            <guid>https://www.saveload.cn/Tech/3Java/Spring/%E5%9F%BA%E4%BA%8ESpringBoot-AOP%E6%9D%A1%E4%BB%B6%E4%B8%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%9E%E7%8E%B0%E6%B3%A8%E8%A7%A3/</guid>      <description>基于SpringBoot AOP条件下自定义、实现注解 转自： 青灯抽丝-基于SpringBoot AOP条件下自定义、实现注解作者： 青灯抽丝链接：https://mp.weixin.qq.com/s/qGpd2_6MwP5sYbSVPbxaPQ来源： 青灯抽丝本文介绍SpringBoot条件下，借助于AOP实现自定义注解Meta Annotation元注解 所谓元注解，就是Java提供的、负责修饰其他注解的注解。常见地有：@Target注解 其定义了注解可以作用的位置，其value属性地常用取值有：ElementType.PACKAGE：包 ElementType.TYPE：类、接口、枚举 ElementType.FIELD：字段 ElementType.METHOD：方法 ElementType.PARAMETER：方法形参 ElementType.CONSTRUCTOR：构造器方法 @Target 注解的 value 是数组类型，当只有一个元素时，可以省略数组写法。示例如下所示：// 该注解可用于方法上@Target(ElementType.METHOD)// 该注解可用于字段、方法、构造器方法上@Target({ElementType.FIELD, ElementType.METHOD, ElementType.CONSTRUCTOR}) @Retention注解 其定义了注解的生命周期。其value属性地常用取值有：RetentionPolicy.SOURCE：在Java源文件中有效。编译器会丢弃掉 RetentionPolicy.CLASS：在Class文件中有效。运行时JVM会丢弃掉 RetentionPolicy.RUNTIME：运行时有效。此时即可通过反射获取到该注解 日常开发中，对于@Retention注解而言。我们用的更多的就是RetentionPolicy.RUNTIME了。示例如下// 该注解保留到运行时@Retention(RetentionPolicy.RUNTIME) @Repeatable注解 默认情况下，注解不可以在同一处重复使用。为此 Java 8中引入了 @Repeatable 注解解决该问题。通过添加 @Repeatable 注解表示 @Family 注解可在同一处重复使用。同时，我们需要在 @Repeatable 注解的值中指定另一个注解 @Families。表示可以通过 @Families 注解的值来包含这个可重复的注解 @Family。显然此时，@Families 中 value 属性的类型则必须是 @Family 注解的数组@Target(ElementType.FIELD) // 该注解用于字段@Retention(RetentionPolicy.</description>    </item>        <item>      <title></title>      <link>https://www.saveload.cn/Tech/3Java/Spring/%E6%B6%88%E6%81%AF%E9%A9%B1%E5%8A%A8-Spring-Cloud-Stream/</link>      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>            <guid>https://www.saveload.cn/Tech/3Java/Spring/%E6%B6%88%E6%81%AF%E9%A9%B1%E5%8A%A8-Spring-Cloud-Stream/</guid>      <description> 消息驱动—— Spring Cloud Stream 标签：Java、业务模型、进阶、Java框架 时间：2019年10月11日10:39:53 连接：https://www.saveload.cn/html/technology/消息驱动—— Spring Cloud Stream.mk 我们与世界的互动并不是同步的、线性的、严格按照提问-回应的模式进行的，而是消息驱动，不断的接发信息。当我们接收到消息，会对这些消息做出反应，当然，我们也经常会被打断正在执行的主要工作。 通过异步消息与其它微服务互相交互的微服务。使用异步消息在应用间互相通信并不是什么新概念，新的概念是使用消息来传达事件状态的改变——Event Driven Architecture(EDA)，即事件驱动架构，也可以称为Message Driven Architecture(MDA)，消息驱动架构。基于事件驱动架构，我们可以构建高度解耦的系统，需要互相通信的服务不用通过特定的库或其它服务紧密耦合在一起。当与微服务结合时，我们只需让服务监听应用程序发出的事件(消息)流，接收到事件(消息)后作出对应的响应，就可以在应用程序中快速添加新功能。 Spring Cloud的子项目Spring Cloud Stream，能让基于消息驱动的应用开发变得更加简单，使用它，我们可以很容易地就能实现“消息发布和消费”，而且会对底层消息传递平台(后文会介绍)屏蔽服务（包括发布者和消费者）的实现细节。 </description>    </item>        <item>      <title></title>      <link>https://www.saveload.cn/Tech/3Java/Spring/%E8%B7%AF%E7%94%B1%E6%95%B0%E6%8D%AE%E6%BA%90/</link>      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>            <guid>https://www.saveload.cn/Tech/3Java/Spring/%E8%B7%AF%E7%94%B1%E6%95%B0%E6%8D%AE%E6%BA%90/</guid>      <description>1、定义多个数据源，有不同的ID&amp;lt;!-- Druid --&amp;gt;&amp;lt;bean id=&amp;#34;dataSource&amp;#34; class=&amp;#34;com.alibaba.druid.pool.DruidDataSource&amp;#34;&amp;gt;&amp;lt;property name=&amp;#34;driverClassName&amp;#34; value=&amp;#34;${dataSource.driverClassName}&amp;#34;/&amp;gt;&amp;lt;property name=&amp;#34;url&amp;#34; value=&amp;#34;${dataSource.url}&amp;#34;/&amp;gt;&amp;lt;property name=&amp;#34;username&amp;#34; value=&amp;#34;${dataSource.username}&amp;#34;/&amp;gt;&amp;lt;property name=&amp;#34;password&amp;#34; value=&amp;#34;${dataSource.password}&amp;#34;/&amp;gt;&amp;lt;property name=&amp;#34;initialSize&amp;#34; value=&amp;#34;${dataSource.initialSize}&amp;#34;/&amp;gt;&amp;lt;property name=&amp;#34;maxIdle&amp;#34; value=&amp;#34;${dataSource.maxIdle}&amp;#34;/&amp;gt;&amp;lt;property name=&amp;#34;maxActive&amp;#34; value=&amp;#34;${dataSource.maxActive}&amp;#34;/&amp;gt;&amp;lt;property name=&amp;#34;maxWait&amp;#34; value=&amp;#34;${dataSource.maxWait}&amp;#34;/&amp;gt;&amp;lt;property name=&amp;#34;validationQuery&amp;#34; value=&amp;#34;SELECT 1 FROM DUAL&amp;#34;/&amp;gt;&amp;lt;property name=&amp;#34;testWhileIdle&amp;#34; value=&amp;#34;true&amp;#34;/&amp;gt;&amp;lt;property name=&amp;#34;testOnBorrow&amp;#34; value=&amp;#34;false&amp;#34;/&amp;gt;&amp;lt;property name=&amp;#34;testOnReturn&amp;#34; value=&amp;#34;true&amp;#34;/&amp;gt;&amp;lt;/bean&amp;gt;&amp;lt;bean id=&amp;#34;dataSourceHanaJCZC&amp;#34; class=&amp;#34;com.alibaba.druid.pool.DruidDataSource&amp;#34;&amp;gt;&amp;lt;property name=&amp;#34;driverClassName&amp;#34; value=&amp;#34;${hana.driverClassName}&amp;#34;/&amp;gt;&amp;lt;property name=&amp;#34;url&amp;#34; value=&amp;#34;${hanaJCZC.url}&amp;#34;/&amp;gt;&amp;lt;property name=&amp;#34;username&amp;#34; value=&amp;#34;${hanaJCZC.username}&amp;#34;/&amp;gt;&amp;lt;property name=&amp;#34;password&amp;#34; value=&amp;#34;${hanaJCZC.password}&amp;#34;/&amp;gt;&amp;lt;/bean&amp;gt;&amp;lt;bean id=&amp;#34;dataSourceHanaSJCK&amp;#34; class=&amp;#34;com.alibaba.druid.pool.DruidDataSource&amp;#34;&amp;gt;&amp;lt;property name=&amp;#34;driverClassName&amp;#34; value=&amp;#34;${hana.driverClassName}&amp;#34;/&amp;gt;&amp;lt;property name=&amp;#34;url&amp;#34; value=&amp;#34;${hanaSJCK.</description>    </item>        <item>      <title></title>      <link>https://www.saveload.cn/Tech/3Java/Spring/%E9%AB%98%E6%80%A7%E8%83%BDJDBC%E8%BF%9E%E6%8E%A5%E6%B1%A0HikariCP/</link>      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>            <guid>https://www.saveload.cn/Tech/3Java/Spring/%E9%AB%98%E6%80%A7%E8%83%BDJDBC%E8%BF%9E%E6%8E%A5%E6%B1%A0HikariCP/</guid>      <description>1、使用方法： datasource:hikari:minimum-idle: 5maximum-pool-size: 15auto-commit: trueidle-timeout: 30000pool-name: testmax-lifetime: 1800000connection-timeout: 30000connection-test-query: select 1driver-class-name: com.mysql.jdbc.Driverjdbc-url: jdbc:mysql://192.168.2.100:3306/test?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;allowMultiQueries=trueusername: adminpassword: d12h.Po(_f HikariConfig config = new HikariConfig();config.setMaximumPoolSize(100);config.setDataSourceClassName(&amp;#34;com.mysql.jdbc.jdbc2.optional.MysqlDataSource&amp;#34;);config.addDataSourceProperty(&amp;#34;serverName&amp;#34;, &amp;#34;localhost&amp;#34;);config.addDataSourceProperty(&amp;#34;port&amp;#34;, &amp;#34;3306&amp;#34;);config.addDataSourceProperty(&amp;#34;databaseName&amp;#34;, &amp;#34;mydb&amp;#34;);config.addDataSourceProperty(&amp;#34;user&amp;#34;, &amp;#34;bart&amp;#34;);config.addDataSourceProperty(&amp;#34;password&amp;#34;, &amp;#34;51mp50n&amp;#34;);HikariDataSource ds = new HikariDataSource(config); 或者 /**connectionTestQuery=SELECT 1dataSourceClassName=org.postgresql.ds.PGSimpleDataSourcedataSource.user=testdataSource.password=testdataSource.databaseName=mydbdataSource.serverName=localhost*/HikariConfig config = new HikariConfig(&amp;#34;some/path/hikari.properties&amp;#34;);HikariDataSource ds = new HikariDataSource(config); 或者 &amp;lt;!</description>    </item>      </channel></rss>