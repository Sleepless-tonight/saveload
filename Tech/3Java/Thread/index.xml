<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thread on Save Load</title>
    <link>https://www.saveload.cn/Tech/3Java/Thread/</link>
    <description>Recent content in Thread on Save Load</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.saveload.cn/Tech/3Java/Thread/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/3Java/Thread/Java-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%90%8C%E6%AD%A5%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/3Java/Thread/Java-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%90%8C%E6%AD%A5%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</guid>
      <description>Java并发编程：Synchronized 同步并实现原理 一、Synchronized 的基本使用 修饰普通方法
对方法的同步本质上是对对象的同步（方法本质上是属于对象的方法），所以同一同的对象，只能顺序的执行，不能并发执行。 修饰静态方法
对静态方法的同步本质上是对类的同步（静态方法本质上是属于类的方法，而不是对象上的方法），所以即使方法属于不同的对象，但是它们都属于类的实例，所以也只能顺序的执行，不能并发执行。 修饰代码块
对于代码块的同步实质上需要获取Synchronized关键字后面括号中对象的monitor jvm用monitorenter和monitorexit指令对同步提供显式支持。而java常用sychronized方法。
sychronized“方法”通常不是用monitorenter和monitorexit指令实现的。往往是由“方法调用指令”检查常数池里的ACC_SYCHRONIZED标志
但monitorenter和monitorexit指令是为了支持sychronized“语句”而存在的。
注意这里的方法和语句的区别。
语句实例如下：test.java
public class test {
public test() {
}
public static void main(String[] args) {
synchronized(new Object()){
int i = 0;
}
}
}
编译完的结果：
C:\JBuilderX\bin&amp;gt;javap -c -classpath &amp;#34;d:/epm40/classes&amp;#34; test
Compiled from &amp;#34;test.java&amp;#34;
public class test extends java.lang.Object{
public test();
Code:
0: aload_0
1: invokespecial #1; //Method java/lang/Object.&amp;#34;&amp;#34;:()V
4: nop
5: return
public static void main(java.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/3Java/Thread/Java-%E7%BA%BF%E7%A8%8BThread/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/3Java/Thread/Java-%E7%BA%BF%E7%A8%8BThread/</guid>
      <description>Java线程的讲解 标签：Java、线程、Thread 时间：2020年7月8日15点42分 内容：对 Java 线程及设计的相关知识点做记录及讲解 一、Java 线程的状态 初始(NEW)：新创建了一个线程对象，但还没有调用start()方法。 运行(RUNNABLE)：Java线程中将就绪（可运行）（ready）和运行中（running）两种状态笼统的称为“运行”。 线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取CPU的使用权，此时处于就绪状态（ready）。就绪状态的线程在获得CPU时间片后变为运行中状态（running）。 阻塞(BLOCKED)：阻塞状态是指线程因为某种原因放弃了cpu 使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得cpu timeslice 转到运行(running)状态。阻塞的情况分三种： (一). 等待阻塞：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中。 (二). 同步阻塞：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。 (三). 其他阻塞：运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。 等待(WAITING)：进入该状态的线程需要等待其他线程做出一些特定动作（通知或中断）。 超时等待(TIMED_WAITING)：该状态不同于WAITING，它可以在指定的时间后自行返回。 终止(TERMINATED)：表示该线程已经执行完毕。线程run()、main() 方法执行结束，或者因异常退出了run()方法，则该线程结束生命周期。死亡的线程不可再次复生。 二、线程的状态图 1. 初始状态 实现Runnable接口和继承Thread可以得到一个线程类，new一个实例出来，线程就进入了初始状态。
2.1. 就绪状态 就绪状态只是说你资格运行，调度程序没有挑选到你，你就永远是就绪状态。 调用线程的start()方法，此线程进入就绪状态。 当前线程sleep()方法结束，其他线程join()结束，等待用户输入完毕，某个线程拿到对象锁，这些线程也将进入就绪状态。 当前线程时间片用完了，调用当前线程的yield()方法，当前线程进入就绪状态。 锁池里的线程拿到对象锁后，进入就绪状态。 2.2. 运行中状态 线程调度程序从可运行池中选择一个线程作为当前线程时线程所处的状态。这也是线程进入运行状态的唯一一种方式。
3. 阻塞状态 所谓阻塞状态是正在运行的线程没有运行结束，暂时让出CPU，这时其他处于就绪状态的线程就可以获得CPU时间，进入运行状态。
阻塞状态是线程阻塞在进入synchronized关键字修饰的方法或代码块(获取锁)时的状态。（线程试图得到一个锁，而该锁正被其他线程持有） 当前线程T调用Thread.sleep()方法，当前线程进入阻塞状态。 运行在当前线程里的其它线程t2调用join()方法，当前线程进入阻塞状态。 等待用户输入的时候，当前线程进入阻塞状态。（线程调用一个在I/O上被阻塞的操作，即该操作在输入输出操作完成之前不会返回到它的调用者） 4. 等待 处于这种状态的线程不会被分配CPU执行时间，它们要等待被显式地唤醒，否则会处于无限期等待的状态。
5. 超时等待 处于这种状态的线程不会被分配CPU执行时间，不过无须无限期等待被其他线程显示地唤醒，在达到一定时间后它们会自动唤醒。
6. 终止状态 当线程的run()方法完成时，或者主线程的main()方法完成时，我们就认为它终止了。这个线程对象也许是活的，但是，它已经不是一个单独执行的线程。线程一旦终止了，就不能复生。 在一个终止的线程上调用start()方法，会抛出java.lang.IllegalThreadStateException异常。 三、等待队列(本是Object里的方法，但影响了线程) 调用obj的wait(), notify()方法前，必须获得obj锁，也就是必须写在synchronized(obj) 代码段内。 与等待队列相关的步骤和图： 1.线程1获取对象A的锁，正在使用对象A。 2.线程1调用对象A的wait()方法。 3.线程1释放对象A的锁，并马上进入等待队列。 4.锁池里面的对象争抢对象A的锁。 5.</description>
    </item>
    
  </channel>
</rss>
