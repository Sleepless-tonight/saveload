<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MyBatis on Save Load</title>
    <link>https://www.saveload.cn/Tech/3Java/MyBatis/</link>
    <description>Recent content in MyBatis on Save Load</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.saveload.cn/Tech/3Java/MyBatis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/3Java/MyBatis/Mybatis-%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/3Java/MyBatis/Mybatis-%E6%8F%92%E4%BB%B6/</guid>
      <description>Mybatis 插件 Mybatis 插件可以在 DAO 层进行拦截，如打印执行的 SQL 语句日志，做一些权限控制，分页等功能；
Mybatis 插件典型适用场景 分页功能 mybatis 的分页默认是基于内存分页的（查出所有，再截取），数据量大的情况下效率较低，不过使用mybatis插件可以改变该行为，只需要拦截 StatementHandler 类的 prepare方法，改变要执行的SQL语句为分页语句即可；
公共字段统一赋值 一般业务系统都会有创建者，创建时间，修改者，修改时间四个字段，对于这四个字段的赋值，实际上可以在DAO层统一拦截处理，可以用mybatis插件拦截Executor类的update方法，对相关参数进行统一赋值即可；
性能监控 对于SQL语句执行的性能监控，可以通过拦截 Executor 类的 update, query 等方法，用日志记录每个方法执行的时间；
Mybatis 插件介绍 什么是Mybatis插件 与其称为Mybatis插件，不如叫Mybatis拦截器，更加符合其功能定位，实际上它就是一个拦截器，应用代理模式，在方法级别上进行拦截
支持拦截的方法 执行器Executor（update、query、commit、rollback等方法）； 参数处理器ParameterHandler（getParameterObject、setParameters方法）； 结果集处理器ResultSetHandler（handleResultSets、handleOutputParameters等方法）； SQL语法构建器StatementHandler（prepare、parameterize、batch、update、query等方法）； 拦截阶段 那么这些类上的方法都是在什么阶段被拦截的呢？为理解这个问题，我们先看段简单的代码（摘自 mybatis 源码中的单元测试 SqlSessionTest 类），来了解下典型的 mybatis 执行流程，如下代码所示：
以上代码主要完成以下功能：
读取mybatis的xml配置文件信息 通过SqlSessionFactoryBuilder创建SqlSessionFactory对象 通过SqlSessionFactory获取SqlSession对象 执行SqlSession对象的selectList方法，查询结果 关闭SqlSession 如下是时序图，在整个时序图中，涉及到mybatis插件部分已标红，基本上就是体现在上文中提到的四个类上，对这些类上的方法进行拦截。
Mybatis 插件实现机制 先来看下mybatis是如何加载插件配置的，对应的xml配置信息如下：
对应的解析代码如下，主要做以下工作：
根据解析到的类信息创建 Interceptor 对象； 调用 setProperties 方法设置属性变量； 添加到 Configuration 的 interceptorChain 拦截器链中； 以上逻辑对应的时序图如下：
代理对象的生成 Mybatis 插件的实现机制主要是基于动态代理实现的，其中最为关键的就是代理对象的生成，所以有必要来了解下这些代理对象是如何生成的。
Executor 代理对象 ParameterHandler代理对象 ResultSetHandler代理对象 StatementHandler代理对象 观察源码，发现这些可拦截的类对应的对象生成都是通过InterceptorChain的pluginAll方法来创建的，进一步观察pluginAll方法，如下：</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/3Java/MyBatis/MyBatis3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/3Java/MyBatis/MyBatis3/</guid>
      <description>标题：MyBatis3
标签：Java、基础、MyBatis、源码解读、进阶、Java开源框架 时间：2018年7月17日19:20:24 连接：https://www.saveload.cn/html/technology/MyBatis3.txt</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/3Java/MyBatis/MyBatis%E5%9B%9B%E5%A4%A7%E6%8E%A5%E5%8F%A3%E4%B9%8B-Executor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/3Java/MyBatis/MyBatis%E5%9B%9B%E5%A4%A7%E6%8E%A5%E5%8F%A3%E4%B9%8B-Executor/</guid>
      <description> MyBatis四大接口之 Executor </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/3Java/MyBatis/%E4%B8%80%E4%BA%9BMyBatis%E5%8F%8ASQL%E7%9A%84%E5%BA%94%E7%94%A8%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/3Java/MyBatis/%E4%B8%80%E4%BA%9BMyBatis%E5%8F%8ASQL%E7%9A%84%E5%BA%94%E7%94%A8%E6%8A%80%E5%B7%A7/</guid>
      <description> 1、test 属性的值可以转义为Java代码 例如：可以.size、可以.toString() 传入参数是 list 在 mapper.xml 中 2、自定义排序 通过 order by instr (a,b) 方法对 b 字段按 a 展示顺序排序 3、复杂对象在 mapper.xml 文件中取值、 传入参数是 List&amp;lt;Map&amp;lt;String,String&amp;raquo; 在mapper.xml 文件中通过get方法取值、（另可以 item.sourecSysid 形式通过属性取值。） 在 mapper.xml 文件中通过 orderBys 对象自定义排序 </description>
    </item>
    
  </channel>
</rss>
