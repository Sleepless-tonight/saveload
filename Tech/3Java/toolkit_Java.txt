消息中间件：
RocketMQ
	Apache RocketMQ™是一个开源的分布式消息传递和流数据平台。
Kafka	
	Kafka®用于构建实时数据管道和流应用程序。它具有水平可扩展性，容错性，快速性，并在数千家公司的生产中运行。
Apache ActiveMQ
	Apache ActiveMQ ™是最受欢迎和功能最强大的开源消息传递和Integration Patterns服务器。


time：2018-6-11 10:20:59
title：依赖注入 IOC
	1、依赖：
		如果在 Class A 中，有 Class B 的实例，则称 Class A 对 Class B 有一个依赖。
	2、依赖注入：


	

time：2018-6-11 10:35:50
title：Hard init（硬初始化）
	
time：2018年12月6日16:54:07
title：Java 脚手架项目
	JeeSite、
	guns、
	pig、
	


		
		
		
time：2018-6-11 16:51:48
title：object 转 map
相关：
	1、通过ObjectMapper先将bean转换为json，再将json转换为map，但是这种方法比较绕，且效率很低，经测试，循环转换10000个bean，
		就需要12秒！！！不推荐使用
	2、通过java反射，获取bean类的属性和值，再转换到map对应的键值对中，这种方法次之，但稍微有点麻烦
	3、通过net.sf.cglib.beans.BeanMap类中的方法，这种方式效率极高，它跟第二种方式的区别就是因为使用了缓存，初次创建bean时需
		要初始化，之后就使用缓存，所以速度极快，经测试，循环bean和map的转换10000次，仅需要300毫秒左右
代码主体：
	方法2：
		private Map<String, String> getValueMap(Object obj) {  
  
			Map<String, String> map = new HashMap<String, String>();  
			// System.out.println(obj.getClass());  
			// 获取f对象对应类中的所有属性域  
			Field[] fields = obj.getClass().getDeclaredFields();  
			for (int i = 0, len = fields.length; i < len; i++) {  
				String varName = fields[i].getName();  
				try {  
					// 获取原来的访问控制权限  
					boolean accessFlag = fields[i].isAccessible();  
					// 修改访问控制权限  
					fields[i].setAccessible(true);  
					// 获取在对象f中属性fields[i]对应的对象中的变量  
					Object o = fields[i].get(obj);  
					if (o != null)  
						map.put(varName, o.toString());  
					// System.out.println("传入的对象中包含一个如下的变量：" + varName + " = " + o);  
					// 恢复访问控制权限  
					fields[i].setAccessible(accessFlag);  
				} catch (IllegalArgumentException ex) {  
					ex.printStackTrace();  
				} catch (IllegalAccessException ex) {  
					ex.printStackTrace();  
				}  
			}  
			return map;  
  
		}  
		
	方法3：	
		  /** 
		 * 将对象装换为map 
		 * @param bean 
		 * @return 
		 */
		public static <T> Map<String, Object> beanToMap(T bean) { 
		  Map<String, Object> map = Maps.newHashMap(); 
		  if (bean != null) { 
			BeanMap beanMap = BeanMap.create(bean); 
			for (Object key : beanMap.keySet()) { 
			  map.put(key+"", beanMap.get(key)); 
			}       
		  } 
		  return map; 
		} 
		/** 
		 * 将map装换为javabean对象 
		 * @param map 
		 * @param bean 
		 * @return 
		 */
		public static <T> T mapToBean(Map<String, Object> map,T bean) { 
		  BeanMap beanMap = BeanMap.create(bean); 
		  beanMap.putAll(map); 
		  return bean; 
		} 
		/** 
		 * 将List<T>转换为List<Map<String, Object>> 
		 * @param objList 
		 * @return 
		 * @throws JsonGenerationException 
		 * @throws JsonMappingException 
		 * @throws IOException 
		 */
		public static <T> List<Map<String, Object>> objectsToMaps(List<T> objList) { 
		  List<Map<String, Object>> list = Lists.newArrayList(); 
		  if (objList != null && objList.size() > 0) { 
			Map<String, Object> map = null; 
			T bean = null; 
			for (int i = 0,size = objList.size(); i < size; i++) { 
			  bean = objList.get(i); 
			  map = beanToMap(bean); 
			  list.add(map); 
			} 
		  } 
		  return list; 
		} 
		/** 
		 * 将List<Map<String,Object>>转换为List<T> 
		 * @param maps 
		 * @param clazz 
		 * @return 
		 * @throws InstantiationException 
		 * @throws IllegalAccessException 
		 */
		public static <T> List<T> mapsToObjects(List<Map<String, Object>> maps,Class<T> clazz) throws InstantiationException, IllegalAccessException { 
		  List<T> list = Lists.newArrayList(); 
		  if (maps != null && maps.size() > 0) { 
			Map<String, Object> map = null; 
			T bean = null; 
			for (int i = 0,size = maps.size(); i < size; i++) { 
			  map = maps.get(i); 
			  bean = clazz.newInstance(); 
			  mapToBean(map, bean); 
			  list.add(bean); 
			} 
		  } 
		  return list; 
		}
		
		
time：2018-6-13 09:52:51
title：乐观锁（乐观并发控制 OCC）
	body：
		乐观并发控制：
				乐观并发控制（OCC）是一种应用于事务性系统的并发控制方法。OCC假设多个交易可以频繁完成而不会互相干扰，在运行时，
			事物使用数据资源而不锁定这些资源，在提交前，每个事物都会验证没有其他事物修改了它读取的数据，如果检查显示有冲突的
			修改，则提交事物回滚并可以重新启动。
				OCC通常用于数据征用较少的环境中，当冲突很少时，事物可以完成，无需管理锁的开销，也不需要事务等待其他事务的锁清
			除，从而导致比其他并发控制方法更高的吞吐量。但是，如果争用数据资源频繁，反复重新启动交易的成本会严重影响性能; 人
			们通常认为其他并发控制方法在这些条件下具有更好的性能。但是，基于锁定（“悲观”）的方法也可能导致性能较差，因为即使
			避免了死锁，锁定也可以极大地限制有效并发。
		OCC阶段：
			开始：记录标记事务开始的时间戳。
			修改：读取数据库值，并暂时写入更改。
			验证：检查其他事务是否修改了此事务已使用（读取或写入）的数据。这包括在此事务启动时间之后完成的事务，以及可选的在
					验证时间仍处于活动状态的事务。
			提交/回滚：如果没有冲突，请使所有更改生效。如果有冲突，通常通过中止交易来解决它，尽管其他解决方案也是可能的。必须
					小心避免TOCTTOU错误，特别是如果这个阶段和前一个阶段不是作为单个原子操作执行的话。
					
		为什么需要并发控制：
			如果事务是连续执行的，即顺序没有时间重叠，则不存在事务并发。但是，如果允许以不受控制的方式使用交织操作的并发事务，则可能会发生一些意想不到的结果。
				（mysql的默认隔离级别为READ UMCOMMITTED，在这种情况下会造成脏读，不可重复读，幻读。）
				
			丢失更新：一个事务修改某行数据时，另一个事务同时修改了该行数据，使第一个事务对数据的修改丢失。

			脏读：一个事务读取了另一个事务未提交的数据。

			不可重复读：一个事务再次读取之前曾读取过的数据时，发现该数据已经被另一个已提交的事务修改。
				不可重复读的重点是修改，同样的条件，你读取过的数据，再次读取出来发现值不一样了
				
			幻读：一个事务根据相同的查询条件，重新执行查询，返回的记录中包含与前一次执行查询返回的记录不同的行。
				幻读的重点在于新增或者删除，同样的条件，第 1 次和第 2 次读出来的记录数不一样
				
						
		数据库事务和ACID规则：
			事物作用：每次数据库操作都有明确的边界，使之遵循ACID规则。
			
			ACID规则：
				原子性： - 当事务完成时（分别提交或放弃），所有操作或全部操作的影响仍然存在（“全部或全部”或“无”）语义。换句话
					说，对于外部世界来说，一个已提交的事务（通过其对数据库的影响）显示为不可分割的（原子的），并且被中止的事务
					根本不会影响数据库。无论是所有的操作都完成了交易还是没有任何其他操作。
					
				一致性： - 每个事务都必须使数据库保持一致（正确）状态，即维护数据库的预定完整性规则（数据库对象之间的约束）。
					事务必须将数据库从一个一致的状态转换为另一个一致的状态（但是，事务的程序员有责任确保事务本身是正确的，即正
					确执行它打算执行的事情（从应用程序的角度查看），而预定义的完整性规则由DBMS执行）。因此，由于数据库通常只能
					通过事务来更改，所有数据库的状态都是一致的。
					
				隔离： - 事务不能相互干扰（作为执行的最终结果）。而且，通常（取决于并发控制方法），不完整事务的影响对另一个事务
					是不可见的。提供隔离是并发控制的主要目标。
					
				持久性： - 成功（已提交）事务的影响必须通过崩溃持续存在（通常通过将事务的影响和其提交事件记录在非易失性内存中）。
				
		数据库的隔离性：
			（1）READ_UNCOMMITTED
			　　这是事务最低的隔离级别，它充许另外一个事务可以看到这个事务未提交的数据。
			　　解决第一类丢失更新的问题，但是会出现脏读、不可重复读、第二类丢失更新的问题，幻读 。
			（2）READ_COMMITTED
			　　保证一个事务修改的数据提交后才能被另外一个事务读取，即另外一个事务不能读取该事务未提交的数据。
			　　解决第一类丢失更新和脏读的问题，但会出现不可重复读、第二类丢失更新的问题，幻读问题
			（3）REPEATABLE_READ
			　　保证一个事务相同条件下前后两次获取的数据是一致的
				解决第一类丢失更新，脏读、不可重复读、第二类丢失更新的问题，但会出幻读。
			（4）SERIALIZABLE
			　　事务被处理为顺序执行。
			　　解决所有问题
			
				注意：置数据库的隔离级别一定要是在开启事务之前！
						Connection conn = null;
						Statement st = null;
						Resultset rs = null
						try {
							conn = JdbcUtils.getConnection();
							//设置该链接的隔离级别
							conn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE)
							conn. setAutocommit(fa1se);/开启事务
				后记：隔离级别的设置只对当前链接有效。对于使用MySQL命令窗口而言，一个窗口就相当于一个链接，当前窗口设置的隔离级别
					只对当前窗口中的事务有效；对于JDBC操作数据库来说，一个Connection对象相当于一个链接，而对于Connection对象设置的
					隔离级别只对该Connection对象有效，与其他链接Connection对象无关。
					
		InnoDB引擎的锁机制
			（之所以以InnoDB为主介绍锁，是因为InnoDB支持事务，支持行锁和表锁用的比较多，Myisam不支持事务，只支持表锁）

			共享锁（S）：允许一个事务去读一行，阻止其他事务获得相同数据集的排他锁。
			排他锁（X)：允许获得排他锁的事务更新数据，阻止其他事务取得相同数据集的共享读锁和排他写锁。
			意向共享锁（IS）：事务打算给数据行加行共享锁，事务在给一个数据行加共享锁前必须先取得该表的IS锁。
			意向排他锁（IX）：事务打算给数据行加行排他锁，事务在给一个数据行加排他锁前必须先取得该表的IX锁。

			说明：
			1）共享锁和排他锁都是行锁，意向锁都是表锁，应用中我们只会使用到共享锁和排他锁，意向锁是mysql内部使用的，不需要用户干预。

			2）对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及数据集加排他锁（X)；对于普通SELECT语句，InnoDB不会加任何锁，事务可以通过以下语句显示给记录集加共享锁或排他锁。
			共享锁（S）：SELECT * FROM table_name WHERE ... LOCK IN SHARE MODE。
			排他锁（X)：SELECT * FROM table_name WHERE ... FOR UPDATE。

			3）InnoDB行锁是通过给索引上的索引项加锁来实现的，因此InnoDB这种行锁实现特点意味着：只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁！
			
		乐观锁
			乐观锁，大多是基于数据版本   Version ）记录机制实现。何谓数据版本？即为数据增加一个版本标识，在基于数据库表的版本解决方案中，一般是通

			过为数据库表增加一个 “version” 字段来 实现。 读取出数据时，将此版本号一同读出，之后更新时，对此版本号加一。此时，将提 交数据的版本数据与数据

			库表对应记录的当前版本信息进行比对，如果提交的数据 版本号大于数据库表当前版本号，则予以更新，否则认为是过期数据。 对于上面修改用户帐户信息		
			
	
				
				
time：2018-6-13 15:40:35
title：数据库设计的标准化要求
body：
	标准的数据库的表设计原则是：
		1) “One Fact in One Place”即某个表只包括其本身基本的属性，当不是它们本身所具有的属性时需进行分解。
		2) 字段值具有原子性,不能再分
		3) 一个表必须有主键,即每行数据都能被唯一的区分;
		4) 一个表中不能包涵其他相关表中非关键字段的信息,即数据表不能有沉余字段;
				（往往我们在设计表中不能遵守第三范式,因为合理的沉余字段将会给我们减少join的查询）
		
	索引使用原则：
			1) 不要索引blob/text等字段,不要索引大型字段(有很多字符),这样作会让索引占用太多的存储空间.
			2) 不要索引常用的小型表
					索引可以增加查询效率，但同样也会降低插入和更新的效率
					（不要为小型数据表设置任何键,假如它们经常有插入和删除操作就更别 这样作了对这些插入和删除操作的索引维护可
				能比扫描表空间消耗更多的时间.）
			3) 不在索引做列运算;	
			4) innodb主键推荐使用自增列(主键建立聚簇索引,主键不应该被修改,字符串不应该做主键)(理解Innodb的索引保存结构就知道了);
			
	SQL核心原则：
        1) 不在数据库做运算;
        2) cpu计算务必移至业务层;
        3) 控制列数量(字段少而精,字段数建议在20以内);
        4) 平衡范式与冗余(效率优先；往往牺牲范式)
        5) 尽量做到冷热数据分离，减少表的宽度 
        6) 拒绝3B(拒绝大sql语句：big sql、拒绝大事物：big transaction、拒绝大批量：big batch);
		
	字段类原则：
        1) 用好数值类型(用合适的字段类型节约空间);
        2) 字符转化为数字(能转化的最好转化,同样节约空间、提高查询性能);
        3) 避免使用NULL字段(NULL字段很难查询优化、NULL字段的索引需要额外空间、NULL字段的复合索引无效);
        4) 少用text类型(尽量使用varchar代替text字段);
	主键 
		1) InnoDB是按照主键的顺序来组织表的
		2) 不使用更新频繁的列作为主键，不使用多列主键
		3) 不使用uuid，md5,hash,字符串列作为主键
		4) 主键建议选择使用自增id值
		
	外键 
		1) 不建议使用外键约束，但一定在表与表之间的关联键上建立索引
		2) 外键可用于保证数据的参照完整性，但建议在业务端实现
		3) 外键会影响父表和子表的写操作从而降低性能


time：2018-6-19 16:45:21
title：Spring中注解@
body:
	@Configuration可理解为用spring的时候xml里面的<beans>标签
		
	@Bean可理解为用spring的时候xml里面的<bean>标签
		备注：@Configuration和@Bean同样可以用在普通的spring项目中，而不是Spring Boot特有的，只是在spring用的时候，注意加上扫包配置

time:2018-6-25 17:49:27
title：耦合与内聚
body:
	在软件工程中，耦合是软件模块之间相互依赖的程度; 衡量两个例程或模块的紧密连接程度; [1]模块之间关系的强度。[2]
		耦合通常与内聚力形成对比。低耦合通常与高内聚力相关，反之亦然。低耦合通常表明结构良好的计算机系统和良好的设计，并且与高内聚性相结合时，支持高可读性和可维护性的总体目标。	
		
	耦合和内聚是非常频繁出现的术语。耦合是指模块之间的相互依赖关系，而内聚则描述单个模块内的功能是如何相关的。低凝聚力意味着一个给定的模块执行彼此不相关的任务，因此当模块变大时会产生问题。	

		
		
time：2018-6-28 14:22:34
title：SLF4J + logbak		
body:	
		
		
time：2018-6-28 23:22:57
title：Spring Boot 拦截器 HandlerInterceptor	
body:			
		
		HandlerInterceptor 的功能跟过滤器类似，但是提供更精细的的控制能力：在request被响应之前、request被响应
	之后、视图渲染之前以及request全部结束之后。我们不能通过拦截器修改request内容，但是可以通过抛出异常（或者返
	回false）来暂停request的执行。	
		
		
		实现 UserRoleAuthorizationInterceptor 的拦截器有： 
			ConversionServiceExposingInterceptor 
			CorsInterceptor 
			LocaleChangeInterceptor 
			PathExposingHandlerInterceptor 
			ResourceUrlProviderExposingInterceptor 
			ThemeChangeInterceptor 
			UriTemplateVariablesHandlerInterceptor 
			UserRoleAuthorizationIntercepto
		
		其中 LocaleChangeInterceptor 和 ThemeChangeInterceptor 比较常用。

		配置拦截器也很简单，Spring 为什么提供了基础类WebMvcConfigurerAdapter ，我们只需要重写 addInterceptors 
	方法添加注册拦截器。
		
		
	实现自定义拦截器只需要3步： 
		1、创建我们自己的拦截器类并实现 HandlerInterceptor 接口。 
		2、创建一个Java类继承WebMvcConfigurerAdapter，并重写 addInterceptors 方法。 
		2、实例化我们自定义的拦截器，然后将对像手动添加到拦截器链中（在addInterceptors方法中添加）。 
		PS：本文重点在如何在Spring-Boot中使用拦截器，关于拦截器的原理请大家查阅资料了解。	
				
				
			
		
		
time：2018-6-29 14:52:24
title：HttpServletRequest 获取参数
body:	 request.getParameterMap()、request.getParameter()		
		

time：2018-7-10 20:49:49
title：时间 Date	
body:
	字符串转date
		new Date date = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(startTime)
		

time：2018-7-10 20:49:49
title：Netty	
body:	
	底层架构：
	
	框架特性的设计理念：

	Reactor模式:
	
	
	目录：
		





















		
		
		
Samsung_T5		
		
Shiliang.1995		
		
		
time：2018-7-3 15:00:34
title：jvm
body：
			兄弟加油ヾ(◍°∇°◍)ﾉﾞ！！！，其实啊，没有什么值传递引用传递，全都是数据在堆栈空间的操作，一切数据都可以看为是key-tables
		
		
		
		
		
		
		
		
		
		
		
		
		
		


		
		