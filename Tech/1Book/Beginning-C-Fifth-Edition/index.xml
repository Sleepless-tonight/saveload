<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Beginning C ,Fifth Edition on Save Load</title>
    <link>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/</link>
    <description>Recent content in Beginning C ,Fifth Edition on Save Load</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition-%E7%AC%AC10%E7%AB%A0%E5%9F%BA%E6%9C%AC%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition-%E7%AC%AC10%E7%AB%A0%E5%9F%BA%E6%9C%AC%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA%E6%93%8D%E4%BD%9C/</guid>
      <description> Beginning C ,Fifth Edition 第8章：程序的结构 如第1章所述,将程序分成适度的自包含单元是开发任一程序的基本方式。当工作很多时,最明智的做法就是把它分成许多便于管理的部分,使每一小部分能很轻松地完成,并确保正确完成整个工作。如果仔细设计各个代码块,就可以在其他程序中重用其中的一些代码块。
C语言中的一个重要观念是,每个程序都应切割成许多小的函数。前面的所有例子都编写成一个函数main(),还涉及其他函数,因为这些例子还使用各种标准库函数进行输入输出、数学运算和处理字符串。
本章将介绍如何使程序更有效率,利用更多自己的函数更方便地开发程序。
8.1 指针初探 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition-%E7%AC%AC11%E7%AB%A0%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition-%E7%AC%AC11%E7%AB%A0%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E6%8D%AE/</guid>
      <description> Beginning C ,Fifth Edition 第8章：程序的结构 如第1章所述,将程序分成适度的自包含单元是开发任一程序的基本方式。当工作很多时,最明智的做法就是把它分成许多便于管理的部分,使每一小部分能很轻松地完成,并确保正确完成整个工作。如果仔细设计各个代码块,就可以在其他程序中重用其中的一些代码块。
C语言中的一个重要观念是,每个程序都应切割成许多小的函数。前面的所有例子都编写成一个函数main(),还涉及其他函数,因为这些例子还使用各种标准库函数进行输入输出、数学运算和处理字符串。
本章将介绍如何使程序更有效率,利用更多自己的函数更方便地开发程序。
8.1 指针初探 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition-%E7%AC%AC12%E7%AB%A0%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition-%E7%AC%AC12%E7%AB%A0%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6/</guid>
      <description> Beginning C ,Fifth Edition 第8章：程序的结构 如第1章所述,将程序分成适度的自包含单元是开发任一程序的基本方式。当工作很多时,最明智的做法就是把它分成许多便于管理的部分,使每一小部分能很轻松地完成,并确保正确完成整个工作。如果仔细设计各个代码块,就可以在其他程序中重用其中的一些代码块。
C语言中的一个重要观念是,每个程序都应切割成许多小的函数。前面的所有例子都编写成一个函数main(),还涉及其他函数,因为这些例子还使用各种标准库函数进行输入输出、数学运算和处理字符串。
本章将介绍如何使程序更有效率,利用更多自己的函数更方便地开发程序。
8.1 指针初探 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition-%E7%AC%AC13%E7%AB%A0%E6%94%AF%E6%8C%81%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition-%E7%AC%AC13%E7%AB%A0%E6%94%AF%E6%8C%81%E5%8A%9F%E8%83%BD/</guid>
      <description> Beginning C ,Fifth Edition 第8章：程序的结构 如第1章所述,将程序分成适度的自包含单元是开发任一程序的基本方式。当工作很多时,最明智的做法就是把它分成许多便于管理的部分,使每一小部分能很轻松地完成,并确保正确完成整个工作。如果仔细设计各个代码块,就可以在其他程序中重用其中的一些代码块。
C语言中的一个重要观念是,每个程序都应切割成许多小的函数。前面的所有例子都编写成一个函数main(),还涉及其他函数,因为这些例子还使用各种标准库函数进行输入输出、数学运算和处理字符串。
本章将介绍如何使程序更有效率,利用更多自己的函数更方便地开发程序。
8.1 指针初探 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition-%E7%AC%AC14%E7%AB%A0%E9%AB%98%E7%BA%A7%E4%B8%93%E7%94%A8%E4%B8%BB%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition-%E7%AC%AC14%E7%AB%A0%E9%AB%98%E7%BA%A7%E4%B8%93%E7%94%A8%E4%B8%BB%E9%A2%98/</guid>
      <description> Beginning C ,Fifth Edition 第8章：程序的结构 如第1章所述,将程序分成适度的自包含单元是开发任一程序的基本方式。当工作很多时,最明智的做法就是把它分成许多便于管理的部分,使每一小部分能很轻松地完成,并确保正确完成整个工作。如果仔细设计各个代码块,就可以在其他程序中重用其中的一些代码块。
C语言中的一个重要观念是,每个程序都应切割成许多小的函数。前面的所有例子都编写成一个函数main(),还涉及其他函数,因为这些例子还使用各种标准库函数进行输入输出、数学运算和处理字符串。
本章将介绍如何使程序更有效率,利用更多自己的函数更方便地开发程序。
8.1 指针初探 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition-%E7%AC%AC1%E7%AB%A0C-%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition-%E7%AC%AC1%E7%AB%A0C-%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/</guid>
      <description>Beginning C ,Fifth Edition 第1章 C 语言编程 程序即一组指令，可以让计算机依指令行事，完成指定的任务。
本章的主要内容
C 语言标准 标准库的概念 如何创建 C 程序 如何组织 C 程序 如何编写在屏幕上显示文本的程序 1.1 C 语言 1.2 标准库 标准库定义了编写C程序时常常需要的常量、符号和函数。它还提供了基本C语言的一些可选扩展，标准库以不依赖机器的形式实现，即相同的C代码在不同的底层硬件上会实现相同的功能。
标准库在一系列文件——头文件中指定。头文件的扩展名总是.h。使用一组标准功能可用于C程序文件，只需要将对应的标准头文件含进来。
1.3 学习 C 1.4 创建 C 程序 C 程序的创建工程有 4 个基本步骤：
编辑 编译 链接 执行 程序要运行起来，必须要经过四个步骤：预处理、编译、汇编和链接。接下来通过几个简单的例子来详细讲解一下这些过程。 对于上边用到的几个选项需要说明一下。
使用 gcc 命令不跟任何的选项的话，会默认执行预处理、编译、汇编、链接这整个过程，如果程序没有错，就会得到一个可执行文件，默认为a.out
-E选项：提示编译器执行完预处理就停下来，后边的编译、汇编、链接就先不执行了。
-S选项：提示编译器执行完编译就停下来，不去执行汇编和链接了。
-c选项：提示编译器执行完汇编就停下来。
所以，这三个选项相当于是限定了编译器执行操作的停止时间，而不是单独的将某一步拎出来执行。
1.4.1 编辑 创建和修改 C 程序的源代码——我们编写的程序指令称之为源代码。
1.4.2 编译 编译器可以将源代码转换成机器语言，在编译过程中，会找到并报告错误。这个阶段的输入是在编译期间产生的包含源代码的文件，常称为源文件。
编译器会检查源文件中的错误。
编译器输出的结果成为对象代码，存放于对象文件它与源文件同名，这些文件在Windows中扩展名通常是 .obj,Linux中通常是.o
若编译器是GUN，编译命令是：
gcc -c main.c 如果省略了 -c 这个参数，程序还会自动链接，生成可执行文件。
编译过程包括两个阶段：第一个阶段称为预处理阶段，在此期间会修改或添加代码。第二阶段是生成对象代码的实际编译过程。源文件可以包含预处理宏，他们用于添加或修改 C 语言程序。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition-%E7%AC%AC2%E7%AB%A0%E7%BC%96%E7%A8%8B%E5%88%9D%E6%AD%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition-%E7%AC%AC2%E7%AB%A0%E7%BC%96%E7%A8%8B%E5%88%9D%E6%AD%A5/</guid>
      <description>Beginning C ,Fifth Edition 第2章 编程初步 在程序中仓储数据项的地方是可以变化的，叫做变量(variable)，这是本章的主题。
本章的主要内容：
内存的用法及变量的概念 在 C 中如何计算 变量的不同类型及其用途 强制类型转换的概念及其使用场合 编写一个程序，计算树木的高度 浮点数默认是 double 类型
在数值的末尾添加一个 f，类型为 float
在数字的末尾添加一个大写 L 或小写 l，类型为 long double
2.1 计算机的内存 计算机执行程序时，组成程序的指令和程序操作的数据都必须存储到某个地方。这个地方就是机器的内存，也称之为主内存(main memory)，或随机访问存储器(Random Access Memory, RAM)，RAM是易失性存储器。关闭 PC 后，RAM 的内容就会丢失。PC 把一个或多个磁盘驱动器作为其永久存储器。要在程序结束执行后存储起来的任何数据，都应该写入磁盘。
计算机用二进制存储数据：0 或 1.计算机有时用真(true)和假(false)表示它们：1 是真，0 是假。每一个数据称之为一个位(bit),即二进制数(binary digit)的缩写。
字节的地址(address) 内存中的位以 8 个为一组，每组的 8 位称之为一个字节(byte)。为了使用字节的内容，每个字节用一个数字表示，第一个字节用 0 表示，第二个字节用 1 表示，直到计算机内存的最后一个字节。字节的这个数字标记称之为字节的地址(address)。因此，每个字节的地址都是唯一的。字节的地址唯一地表示计算机内存中的字节。
总之，内存的最小单位是位(bit)，将8个位组合为一组，称之为字节(byte)。每个字节都有唯一的地址。字节的地址从 0 开始。位只能是 0 或 1 ，如图所示：
计算机的内存的常用单位是千字节(KB)、兆字节(MB)、千兆字节(GB)。磁盘驱动器还使用兆兆字节(TB)。这些单位的大小如下：
1KB 是1024 字节。 1MB 是1024 KB，也就是1 048 576 字节。 1GB 是1024 NB，也就是1 072 741 841 字节。 1TB 是1024 GB，也就是1 099 511 627 776 字节。 如果 PC 有 1GB 的 RAM ，字节地址就是0~1 073 741 841 。0 到 1023 共 1024 个数字而在二进制中，1023的十个位刚好全是1：11 1111 1111 ，(1 byte ,8位)，MB 需要 20 个位，GB 需要 30 个位，</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition-%E7%AC%AC3%E7%AB%A0%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition-%E7%AC%AC3%E7%AB%A0%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/</guid>
      <description>Beginning C ,Fifth Edition 第3章 条件判断 本章将在可以编写的程序种类和构建程序的灵活性方面迈出一大步。我们要学习一种非常强大的编程工具:比较表达式的值,根据其结果,选择执行某组语句。也就是说,可以控制程序中语句的执行顺序。
本章的主要内容:
根据算术比较的结果来判断 逻辑运算符的概念及其用法 再谈从键盘上读取数据 编写一个可用作计算器的程序 3.1 判断过程 在程序中做出判断,就是选择执行一组程序语句,而不执行另一组程序语句。在现实生活中,我们总是要做判断。
跟 Java 一样。
3.1.1 算数比较 C中的比较涉及一些运算符。比较两个值有6个关系运算符：
&amp;lt;
&amp;lt;=
==
!=
&amp;gt;
&amp;gt;= 这些运算都会得到 int 类型的值。如果比较结果为真,每个操作的结果都是 1,否则如果比较结果为假,则每个操作的结果都是 0。如上一章所述, stabool.h 头文件为这些值定义了符号 true 和 false,于是 2!=3得到 true, 5L&amp;gt;3L 和 6 &amp;lt;= 12 也得到 true,表达式 2==3、5&amp;lt;4和 1.2&amp;gt;= 1.3 都得到 0,即 false。
这些表达式称为逻辑表达式或布尔表达式,因为每个表达式都会得到两个结果之一: true 或 false,关系运算符生成布尔结果,所以可以把结果存储在 bool 类型的变量中。例如:
bool result =5 &amp;lt;4;1/ result will be false 任何非零数值在转换为 bool 类型时,都得到 true。这表示,可以把算术表达式的结果赋予 bool 变量,如果它是非零值,就存储 true ,否则就存储 false.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition-%E7%AC%AC4%E7%AB%A0%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition-%E7%AC%AC4%E7%AB%A0%E5%BE%AA%E7%8E%AF/</guid>
      <description>Beginning C ,Fifth Edition 第4章 循环 本章将介绍如何重复执行一个语句块,直到满足某个条件为止,这称为循环。语句块的执行次数可以简单地用一个计数器来控制,语句块重复执行指定的次数,或者还可以更复杂一些,重复执行一个语句块,直到满足某个条件为止,例如用户输入 quit。后者可以编写上一章的计算器示例,使计算过程重复需要的次数,而不必使用goto语句。
本章的主要内容
使语句或语句块重复执行指定的次数 重复执行语句或语句块,直到满足某个条件为止 使用for, while和do-while循环 递增和递减运算符的作用及其用法 编写一个简单的Simon游戏程序 4.1 循环 循环是带有比较数据项功能的一个基本编程工具。循环总是隐含了某种比较,因为它提供了终止循环的方式。典型的循环是使一系列语句重复执行指定的次数,这种循环会存储循环块执行的次数,与需要的重复次数相比较,比较的结果确定何时应终止循环。
4.2 递增和递减运算符 ++ number;
-- number; 4.3 for 循环 4.4 for 循环的一般语法 for(int i = 1, j = 2; i&amp;lt;=5; ++i,j = j+2)
printf(&amp;#34;%5d&amp;#34;,i*j); 4.5 再谈递增和递减运算符 4.5.1 递增运算符 先看看递增运算符。假如变量的类型是 int ，下面的3调语句有相同的结果：
count = count + 1;
count += 1;
++count; 这些语句都给变量 count 加 1.最后一致形式最简洁。 也可以在表达式中使用递增运算符。这个运算符在表达式中的动作是递增变量的值,然后,在表达式中使用递增的值。例如,假设count的值是5,执行如下语句:
total = ++count +6; 变量count会递增到6,在计算等号右边的表达式时,会使用这个值。因此变量total的值为12,这个指令改变两个变量count和total.
4.5.2 递增运算符的前置和后置形式。 前面将++运算符放在变量前面,这叫做前置形式。这个运算符也可以写在变量的后面,这称为后置形式。在表达式中使用前置和后置形式的效果大不相同。如果在表达式中编写的是count++,则变量count的值在使用之后才递增。这看起来有点复杂。修改前面的例子:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition-%E7%AC%AC5%E7%AB%A0%E6%95%B0%E7%BB%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition-%E7%AC%AC5%E7%AB%A0%E6%95%B0%E7%BB%84/</guid>
      <description>Beginning C ,Fifth Edition 第5章 数组 我们经常需要在程序中存储某种类型的大量数据值。例如,如果编写一个程序,追踪一支篮球队的成绩,就要存储一个赛季的各场分数和各个球员的得分,然后输出某个球员的整季得分,或在赛事进行过程中计算出赛季的平均得分。我们可以利用前面所学的知识编写一个程序,为每个分数使用不同的变量。然而,如果一个赛季里有非常多的赛事,这会非常繁琐,因为有球赛的每个球员都需要许多变量。所有篮球分数的类型都相同,不同的是分值,但它们都是篮球赛的分数。理想情况下,应将这些分值组织在一个名称下,例如球员的名字,这样就不需要为每个数据项定义变量了。
本章将介绍如何在C程序中使用数组,然后探讨程序使用数组时,如何通过一个名称来引用一组数值。
本章的主要内容:
什么是数组 如何在程序中使用数组 数组如何使用内存 什么是多维数组 如何编写程序,计算帽子的尺寸 如何编写井字游戏 5.1 数组简介 说明数组的概念及其作用的最好方法,是通过一个例子,来说明使用数组后程序会变得非常简单。这个例子将计算某班学生的平均分数。
5.1.1 不用数组的程序 非常麻烦
5.1.2 什么是数组 数组是一组数目固定、类型相同的数据项,数组中的数据项称为元素。数组中的元素都是int, long或其他类型。下面的数组声明非常类似于声明一个含有单一数值的正常变量,但要在名称后的方括号中放置一个数。
long numbers [10]; 方括号中的数字定义了要存放在数组中的元素个数,称为数组维(array dimension)。数组有一个类型,它组合了元素的类型和数组中的元素个数。因此如果两个数组的元素个数相同、类型也相同,这两个数组的类型就相同。
存储在数组中的每个数据项都用相同的名称访问,在这个例子中,该名称就是 numbers。要选择某个元素,可以在数组名称后的方括号内使用索引值。索引值是从0开始的连续整数。0是第一个元素的索引值,前面numbers数组的元素索引值是0-9,索引值0表示第一个元素,索引值9表示最后一个元素。因此数组元素可表示为numbers[0]numbers[1]、numbers[2] &amp;hellip;&amp;hellip;numbers[9]。
如图5-1所示: 注意,索引值是从0开始,不是1,第一次使用数组时,这是一个常犯的错误,有时这称为off-by-one错误。在一个十元素数组中,最后一个元素的索引值是9,要访问数组中的第4个值,应使用表达式numbers[3]。数组元素的索引值是与第1个元素的偏移量。第1个元素的偏移量是0,第2个元素与第一个元素的偏移量是1,第3个元素与第一个元素的偏移量是2,依此类推。
要访问numbers数组元素的值,也可以在数组名称后的方括号内放置表达式,该表达式的结果必须是一个整数,对应于一个可能的索引值。例如numbers[i-2]。如果i的值是3,就访问数组中的第2个元素numbers[1]。因此,有两种方法来指定索引值,以访问数组中的某个元素。其一,可以使用一个简单的整数,明确指定要访问的元素。其二,可以使用一个在执行程序期间计算的整数表达式。使用表达式的唯一限制是,它的结果必须是整数,该整数必须是对数组有效的索引值。
注意,如果在程序中使用的索引值超过了这个数组的合法范围,程序将不能正常运作。编译器检查不出这种错误,所以程序仍可以编译,但是执行是有问题的。在最好的情况下,是从某处提取了一个垃圾值,所以结果是错误的,且每次执行的结果都不会相同。在最糟的情况下,程序可能会覆盖重要的信息,且锁死计算机,需要重启计算机。有时,这对程序的影响比较微妙:程序有时能正常工作,有时不能,或者程序看起来工作正常,但结果是错误的,只是不明显。因此,一定要细心检查数组索引是否在合法范围内。
5.1.3 使用数组 跟 Java 一样
#include &amp;lt;stdio.h&amp;gt;
int main(void) {
int grades[10];
unsigned int count = 10;
long sum = 0L;
float average = 0.0f;
printf(&amp;#34;\nEnter the 10 grades:\n&amp;#34;);
for (unsigned int i = 0; i &amp;lt; count; ++i) {
printf(&amp;#34;%2u&amp;gt;&amp;#34;, i + 1);
scanf(&amp;#34;%d&amp;#34;, &amp;amp;grades[i]);
sum += grades[i];
}
average = (float) sum / count;
printf(&amp;#34;\nAverage of the ten grades entered is: %.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition-%E7%AC%AC6%E7%AB%A0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%96%87%E6%9C%AC%E7%9A%84%E5%BA%94%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition-%E7%AC%AC6%E7%AB%A0%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%96%87%E6%9C%AC%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
      <description>Beginning C ,Fifth Edition 第6章：字符串和文本的应用 本章将探讨如何使用字符数组,以扩展数组知识。我们经常需要将文本字符串用作个实体,不过C语言没有提供字符串数据类型,而是使用char类型的数组元素存储字符串。本章将介绍如何创建和处理字符串变量,标准库函数如何简化字符串的处理。
本章的主要内容:
如何创建字符串变量 如何连接两个或多个字符串,形成一个字符串 如何比较字符串 如何使用字符串数组 哪些库函数能处理字符串,如何应用它们 6.1 什么是字符串 字符串常量的例子非常常见。字符串常量是放在一对双引号中的一串字符或符号。一对双引号之间的任何内容都会被编译器视为字符串,包括特殊字符和嵌入的空格。每次使用print()显示信息时,就将该信息定义成字符串常量了。以下的语句是用这种方法使用字符串的例子:
printf (&amp;#34;This is a string.&amp;#34;);
printf (&amp;#34;This is on\ntwo lines!&amp;#34;);
printf (&amp;#34;For \&amp;#34; you write \\\&amp;#34;.&amp;#34;); 这3个字符串例子如图6-1所示。存储在内存中的字符码的十进制值显示在这些字符的下方。
第一个字符串是一系列字符后跟一个句号。printf()函数会把这个字符串输出为:
This is a string. 第二个字符串有一个换行符\n,所以字符串显示在两行上:
This is on
two lines! ·第三个字符串有点难以理解,但print()函数的输出很清楚:
For &amp;#34; you write \&amp;#34;. 必须把字符串中的双引号写为转义序列&amp;quot;,因为编译器会把双引号看作字符串的结尾。要在字符串中包含反斜杠,也必须使用转义序列\,因为字符串中的反斜杠总是表示转义序列的开头。
如图6-1所示,每个字符串的末尾都添加了代码值为0的特殊字符,这个字符称为空字符,写为\0。C中的字符串总是由\0字符结束,所以字符串的长度永远比字符串中的字符数多1。
注意
空字符不要和 NULL 混淆。空字符是字符串的终止符,而 NULL 是一个符号,表示不引用任何内容的内存地址。
可以自己将 \0 字符添加到字符串的结尾,但是这会使字符串的末尾有两个\0字符。下面的程序说明了空字符是如何运作的:
#include &amp;lt;stdio.h&amp;gt;
int main(void){
printf (&amp;#34;This is a \0 string.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition-%E7%AC%AC7%E7%AB%A0%E6%8C%87%E9%92%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition-%E7%AC%AC7%E7%AB%A0%E6%8C%87%E9%92%88/</guid>
      <description>Beginning C ,Fifth Edition 第 7 章：指针 第 6 章已提到过指针,还给出使用指针的提示。本章深入探索这个主题,了解指针的功用。本章将介绍许多新概念,所以可能需要多次重复某些内容。本章很长,需要花一些时间学习其内容,用一些例子体验指针。指针的基本概念很简单,但是可以应用它们解决复杂的问题。指针是用C语言高效编程的一个基本元素。
本章的主要内容:
指针的概念及用法 指针和数组的关系 如何将指针用于字符串 如何声明和使用指针数组 如何编写功能更强的计算器程序 7.1 指针初探 指针是 C 语言中最强大的工具之一,它也是最容易令人困惑的主题,所以一定要在开始时正确理解其概念,在深入探讨指针时,要对其操作有清楚的认识。
第 2 和第 5 章讨论内存时,谈到计算机如何为声明的变量分配一块内存。在程序中使用变量名引用这块内存,但是一旦编译执行程序,计算机就使用内存位置的地址来引用它。这是计算机用来引用“盒子(其中存储了变量值)&amp;ldquo;的值。
请看下面的语句:
int number = 5; 这条语句会分配一块内存来存储一个整数,使用 number 名称可以访问这个整数。值 5 存储在这个区域中。计算机用一个地址引用这个区域。存储这个数据的地址取决于所使用的计算机、操作系统和编译器。在源程序中,这个变量名是固定不变的,但地址在不同的系统上是不同的。
可以存储地址的变量称为指针(pointers),存储在指针中的地址通常是另一个变量,如图7-1所示。指针 pnumber 含有另一个变量 number 的地址,变量 number 是一个值为 99 的整数变量。存储在 pnumber 中的地址是 number 第一个字节的地址。“指针”这个词也用于表示一个地址,例如&amp;quot;strcat_s()函数返回一个指针&amp;rdquo;。
首先,知道变量 pnumber 是一个指针是不够的,更重要的是,编译器必须知道它所指的变量类型。没有这个信息,根本不可能知道它占用多少内存,或者如何处理它所指的内存的内容。char 类型值的指针指向占有一个字节的值,而 long 类型值的指针通常指向占有4个字节的值。因此,每个指针都和某个变量类型相关联,也只能用于指向该类型的变量。所以如果指针的类型是 int,就只能指向 int 类型的变量,如果指针的类型是 float,就只能指向 float 类型的变量。一般给定类型的指针写成 type*,其中 type 是任意给定的类型。
每个指针都和某个变量类型相关联
类型名 void 表示没有指定类型,所以 void* 类型的指针可以包含任意类型的数据项地址。类型 void* 常常用做参数类型,或以独立于类型的方式处理数据的函数的返回值类型。任意类型的指针都可以传送为 void* 类型的值,在使用它时,再将其转换为合适的类型。例如, int 类型变量的地址可以存储在 void* 类型的指针变量中。要访问存储在 void* 指针所指地址中的整数值,必须先把指针转换为 int* 类型。本章后面介绍的 malloc() 库函数分配在程序中使用的内存,返回 void* 类型的指针。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition-%E7%AC%AC8%E7%AB%A0%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition-%E7%AC%AC8%E7%AB%A0%E7%A8%8B%E5%BA%8F%E7%9A%84%E7%BB%93%E6%9E%84/</guid>
      <description>Beginning C ,Fifth Edition 第8章：程序的结构 如第 1 章所述,将程序分成适度的自包含单元是开发任一程序的基本方式。当工作很多时,最明智的做法就是把它分成许多便于管理的部分,使每一小部分能很轻松地完成,并确保正确完成整个工作。如果仔细设计各个代码块,就可以在其他程序中重用其中的一些代码块。
C 语言中的一个重要观念是,每个程序都应切割成许多小的函数。前面的所有例子都编写成一个函数main(),还涉及其他函数,因为这些例子还使用各种标准库函数进行输入输出、数学运算和处理字符串。
本章将介绍如何使程序更有效率,利用更多自己的函数更方便地开发程序。
本章的主要内容:
数据如何传给函数 函数如何返回结果 如何定义自己的函数 函数原型的概念和使用场合 函数使用指针参数的优势 8.1 程序的结构 如概述所言,C 程序是由许多函数组成的,其中最重要的就是函数 main(),它是执行的起点。本书介绍库函数 printf() 或 scanf() 时,说明了一个函数可以调用另一个函数,完成特定的工作,在任务完成后调用函数继续执行。不考虑存储在全局变量(参见第9章)中的数据或者可以通过指针参数访问的数据的负面影响,程序中的每个函数都是一个执行特定操作的自包含单元。调用一个函数时,就执行该函数体内的代码,这个函数执行结束后,控制权就回到调用该函数的地方。如图8-1所示为 C 程序由 5 个函数组成时的执行顺序,它并未显示任何语句细节。
这个程序以正常的方式按顺序执行语句,当遇到调用一个函数的语句时,就把参数值传递给函数,从该函数的起始点开始执行,即该函数体的第一条语句。这个函数会一直执行,在遇到 return 语句或到达这个函数体的结束括号时,就返回调用它的那个位置之后执行。
这些组成程序的函数通过函数调用及其 return 语句链接在一起,完成各种工作,以达到程序的目标。图 8-1 中的每个函数在程序中只执行一次。实际上,每个函数可以执行多次,且可以从程序中的多个地方调用。前面的例子中就多次调用函数 printf() 和 scanf()。
在详细了解如何定义自己的函数之前,必须解释变量的一个重要方面,这个方面一直未提及。
8.1.1 变量的作用域和生存期 在前面所有的例子中,都是在定义 main() 函数体的起始处声明程序的变量。事实上,可以在任何代码块的起始处定义变量。这有什么不同吗?这是绝对不同的。变量只存在于定义它们的块中。它们在声明时创建,在遇到下一个闭括号时就不存在了。
在一个块内的其他块中声明的变量也是这样。在外部块的起始处声明的变量也存在于内部块中。这些变量可以随意访问,只要内部块中没有同名的变量即可。
变量在一个块内声明时创建,在这个块结束时销毁,这种变量称为自动变量,因为它们是自动创建和销毁的。给定变量可以在某个程序代码块中访问和引用,这个程序代码块称为变量的作用域。在作用域内使用变量是没有问题的。但是如果试图在变量的作用域外部引用它,编译程序时就会得到一条错误信息,因为这个变量在它的作用域之外不存在。例如下面的代码:
{ int a = 0; // Create a // Reference to a is OK here // Reference to b is an error here - it hasn&amp;#39;t been created yet { int b= 10; // Create b // Reference to a and b is OK here }// b dies here // Reference to b is an error here - it has been destroyed // Reference to a is OK here }// a dies here 对于在一个块内声明的所有变量,在这个块的结束括号之后它们就不再存在。变量 a 可在内外两个块内访问,因为它是在外部块中声明的。变量 b 只能在内部块中访问,因为它是在内部块中声明的。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition-%E7%AC%AC9%E7%AB%A0%E5%87%BD%E6%95%B0%E5%86%8D%E6%8E%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition-%E7%AC%AC9%E7%AB%A0%E5%87%BD%E6%95%B0%E5%86%8D%E6%8E%A2/</guid>
      <description>Beginning C ,Fifth Edition 第 9 章：函数再探 学习了第8章后,读者就应具备创建和使用函数的基础知识了。本章将以此为基础,介绍函数的使用和操作,尤其是如何通过指针访问函数。也会使用一些更灵活的方法在函数之间通信。 本章的主要内容:
函数指针的概念及其用法 如何在函数内使用静态变量 如何在函数之间共享变量 函数如何调用自己,而不陷入无限循环 编写一个五子棋游戏(也称为Reversi) 9.1 函数指针 指针对于操作数据和含有数据的变量是一个非常有用的工具。只要一把火钳就可处理所有火热的东西;同样,使用指针也可以操作函数,函数的内存地址存储了函数开始执行的位置(起始地址),存储在函数指针中的内容就是这个地址。
不过,仅有地址还不够。如果函数通过指针来调用,还必须提供变元的类型和个数,以及返回值的类型。编译器不能仅通过函数的地址来推断这些信息。这意味着,声明函数指针比声明数据类型指针复杂一些。指针包含了地址,而且必须定义一个类型;同样,函数指针也包含了地址,也必须定义一个原型。
9.1.1 声明函数指针 函数指针的声明看起来有点奇怪,容易混涌,所以下面从一个简单的例子开始:
int (*pfunction) (int); 这是一个函数指针变量的声明,它不指向任何内容-一该语句只定义了指针变量。这个指针的名称是 pfunction,指向一个参数是 int 类型、返回值是 int 类型的函数。而且,这个指针只能指向有这些特征的函数。如果函数接受 float 变元,返回 float 值,就需要声明另一个有这些特征的指针。图 9-1 说明了声明的各个成分。
在函数指针的声明中有许多括号。在这个例子中,声明的 *pfunction 部分必须放在括号中。如果省略了括号,就变成 pfunction()函数的声明了,这个函数返回一个指向 int 的值,这可不是我们希望的结果。第二对括号包含参数列表,这与标准函数声明相同。函数指针只能指向特定的函数,该函数有特定的返回类型、特定的参数个数和特定类型的参数。函数名称可以随意,与其他指针变量一样。
9.1.2 通过函数指针调用函数 假定定义如下函数原型:
int sum (int a, int b); // Calculates a+b 这个函数有两个 int 类型的参数,返回值的类型是 int,所以可以把它的地址存储在声明如下的函数指针中:
int (*pfun)(int, int)= sum; 这条语句声明了一个函数指针 pfun,它存储函数的地址,该函数有两个 int 类型的参数,返回值的类型是 int。该语句还用 sum()函数的地址初始化 pfun。要提供初始值,只需要使用有所需原型的函数名。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/Beginning-C-Fifth-Edition/</guid>
      <description>Beginning C ,Fifth Edition 译者序 前言 有抱负的程序员必将面对的三重障碍，遍布程序设计语言中的各类术语、理解如何使用语言元素的语法和作用（而不仅仅只是知道它们的概念）、领会如何在实际场景中应用该语言。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/C-Standard-Functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/Beginning-C-Fifth-Edition/C-Standard-Functions/</guid>
      <description>头文件&amp;lt;stdio.h&amp;gt; scanf_s const size_t BUF_SIZE = 100; // Input buffer size char buffer[BUF_SIZE]; // A 100 byte input buffer scanf_s(&amp;#34;%s&amp;#34;, buffer, BUF_SIZE); // Read a string 从各种来源读取数据，根据其解释并将format结果存储到给定位置。
1）从中读取数据 stdin
2）从文件流中读取数据 stream
3）从空终止的字符串中读取数据buffer。到达字符串的末尾等同于达到文件结束条件fscanf</description>
    </item>
    
  </channel>
</rss>
