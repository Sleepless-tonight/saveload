<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Rust Programming Language on Save Load</title>
    <link>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/</link>
    <description>Recent content in The Rust Programming Language on Save Load</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/rust/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/rust/</guid>
      <description>Rust编程语言 标签：Rust、基础、 时间：2020年8月6日6:25:00 连接：http://www.saveload.cn/html/templates/Thinking-In-Java.mk 前言 介绍 第 1章 入门 1.1。安装 1.2。你好，世界！ 1.3。您好，货运！ 第 2章 编写猜谜游戏 第 3章 通用编程概念 3.1。变量和可变性 3.2。资料类型 3.3。功能 3.4。注释 3.5。控制流 第 4章 了解所有权 4.1。什么是所有权？ 4.2。参考和借阅 4.3。切片类型 第 5章 使用结构来构造相关数据 5.1。定义和实例化结构 5.2。使用结构的示例程序 5.3。方法语法 第 6章 枚举和模式匹配 6.1。定义枚举 6.2。匹配控制流运算符 6.3。如果让简洁控制流 第 7 章 使用软件包，板条箱和模块管理不断增长的项目 Rust 中有三和重要的组织概念：包、箱、模块。
Packages: A Cargo feature that lets you build, test, and share crates 包装：货运功能，可让您构建，测试和共享包装箱 Crates: A tree of modules that produces a library or executable 板条箱：产生库或可执行文件的模块树 Modules and use: Let you control the organization, scope, and privacy of paths 模块和用途：让您控制路径的组织，范围和隐私 Paths: A way of naming an item, such as a struct, function, or module 路径：一种命名项目的方法，例如结构，函数或模块 7.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-10%E7%AB%A0-%E9%80%9A%E7%94%A8%E7%B1%BB%E5%9E%8B%E7%89%B9%E5%BE%81%E5%92%8C%E5%AF%BF%E5%91%BD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-10%E7%AB%A0-%E9%80%9A%E7%94%A8%E7%B1%BB%E5%9E%8B%E7%89%B9%E5%BE%81%E5%92%8C%E5%AF%BF%E5%91%BD/</guid>
      <description> 第 10章 通用类型，特征和寿命 10.1。通用数据类型 10.2。特性：定义共同的行为 10.3。使用生命周期验证参考 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-11%E7%AB%A0-%E7%BC%96%E5%86%99%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-11%E7%AB%A0-%E7%BC%96%E5%86%99%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</guid>
      <description> 第 11章 编写自动化测试 11.1。如何编写测试 11.2。控制测试的运行方式 11.3。测试组织 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-12%E7%AB%A0-I_O%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-12%E7%AB%A0-I_O%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%A8%8B%E5%BA%8F/</guid>
      <description> 第 12章 I_O项目：构建命令行程序 12.1。接受命令行参数 12.2。读取文件 12.3。重构以提高模块化和错误处理 12.4。通过测试驱动开发来开发库的功能 12.5。使用环境变量 12.6。将错误消息写入标准错误而不是标准输出 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-13%E7%AB%A0-%E5%8A%9F%E8%83%BD%E8%AF%AD%E8%A8%80%E5%8A%9F%E8%83%BD%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E9%97%AD%E5%8C%85/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-13%E7%AB%A0-%E5%8A%9F%E8%83%BD%E8%AF%AD%E8%A8%80%E5%8A%9F%E8%83%BD%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E9%97%AD%E5%8C%85/</guid>
      <description> 第 13章 功能语言功能：迭代器和闭包 13.1。闭包：可以捕获其环境的匿名函数 13.2。使用迭代器处理一系列项目 13.3。改善我们的I_O项目 13.4。比较性能：循环与迭代器 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-14%E7%AB%A0-%E6%9C%89%E5%85%B3Cargo%E5%92%8CCrates.io%E7%9A%84%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-14%E7%AB%A0-%E6%9C%89%E5%85%B3Cargo%E5%92%8CCrates.io%E7%9A%84%E6%9B%B4%E5%A4%9A%E4%BF%A1%E6%81%AF/</guid>
      <description> 第 14章 有关Cargo和Crates.io的更多信息 14.1。使用发布配置文件自定义构建 14.2。将箱子发布到Crates.io 14.3。货运工作区 14.4。通过商品安装从Crates.io安装二进制文件 14.5。使用自定义命令扩展货物 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-15%E7%AB%A0-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-15%E7%AB%A0-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid>
      <description> 第 15章 智能指针 15.1。使用盒子 指向堆上的数据 15.2。使用Deref特性将智能指针视为常规参考 15.3。使用Drop Trait运行清理代码 15.4。钢筋混凝土，参考计数智能指针 15.5。RefCell 和内部可变性模式 15.6。参考周期可能会泄漏内存 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-16%E7%AB%A0-%E6%97%A0%E7%95%8F%E7%9A%84%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-16%E7%AB%A0-%E6%97%A0%E7%95%8F%E7%9A%84%E5%B9%B6%E5%8F%91/</guid>
      <description> 第 16章 无畏的并发 16.1。使用线程同时运行代码 16.2。使用消息传递在线程之间传输数据 16.3。共享状态并发 16.4。具有同步和发送特征的可扩展并发 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-17%E7%AB%A0-Rust%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-17%E7%AB%A0-Rust%E7%9A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%E5%8A%9F%E8%83%BD/</guid>
      <description> 第 17章 Rust的面向对象编程功能 17.1。面向对象语言的特征 17.2。使用允许不同类型值的特性对象 17.3。实施面向对象的设计模式 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-18%E7%AB%A0-%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-18%E7%AB%A0-%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%8C%B9%E9%85%8D/</guid>
      <description> 第 18章 模式与匹配 18.1。可以使用所有场所模式 18.2。可引用性：模式是否可能不匹配 18.3。模式语法 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-19%E7%AB%A0-%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-19%E7%AB%A0-%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD/</guid>
      <description> 第 19章 高级功能 19.1。不安全的锈 19.2。高级特质 19.3。高级类型 19.4。高级功能和闭包 19.5。巨集 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-1%E7%AB%A0-%E5%85%A5%E9%97%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-1%E7%AB%A0-%E5%85%A5%E9%97%A8/</guid>
      <description>第 1章 入门 1.1。安装 单独有写一篇如何安装
更新和卸载 通过安装Rust后rustup，轻松更新到最新版本。在您的外壳中，运行以下更新脚本：
$ rustup update 要卸载Rust和rustup，请从您的外壳运行以下卸载脚本：
$ rustup self uninstall 本地文件 运行rustup doc以在浏览器中打开本地文档。
1.2。你好，世界！ fn main() {println!(&amp;#34;Hello, world!&amp;#34;);} 编译和运行 &amp;gt;$ rustc main.rs&amp;gt;.\main.exe Rust程序剖析 第一行声明一个名为的函数main，该函数不带参数且不返回任何内容。如果有参数，它们将放在括号内()。该main功能很特殊：它始终是每个可执行Rust程序中运行的第一个代码。 函数主体用大括号括起来{}。 println!调用Rust宏。如果改为调用函数，则将其输入为println（不带!）。 我们用分号（;）结束该行，这表明该表达式已结束，下一个表达式可以开始了。Rust代码的大多数行以分号结尾。 Rust风格是缩进四个空格，而不是制表符。
1.3。Hello, Cargo! 您好，货运！ Cargo是Rust的构建系统和包管理器。大多数Rustacean使用此工具来管理他们的Rust项目，因为Cargo会为您处理很多任务，例如:
构建代码， 下载代码所依赖的库以及构建这些库。（我们称库为您的代码需要依赖项。） 请在终端中输入以下内容，检查是否已安装Cargo：
$ cargo --version 用 Cargo 创建项目 $ cargo new hello_cargo$ cd hello_cargo 第一个命令创建一个名为hello_cargo的新目录。我们已将项目命名为hello_cargo，并且Cargo在同名目录中创建其文件。
进入hello_cargo目录并列出文件。您会看到Cargo为我们生成了两个文件和一个目录：一个Cargo.toml文件和一个其中带有main.rs文件的 src目录。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-20%E7%AB%A0-%E6%9C%80%E7%BB%88%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E5%A4%9A%E7%BA%BF%E7%A8%8BWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-20%E7%AB%A0-%E6%9C%80%E7%BB%88%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E5%A4%9A%E7%BA%BF%E7%A8%8BWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description> 第 20章 最终项目：构建多线程Web服务器 20.1。构建单线程Web服务器 20.2。将我们的单线程服务器转变为多线程服务器 20.3。正常关机和清理 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-21%E7%AB%A0-%E9%99%84%E5%BD%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-21%E7%AB%A0-%E9%99%84%E5%BD%95/</guid>
      <description> 第 21章 附录 21.1。A-关键字 21.2。B-运算符和符号 21.3。C-可衍生特征 21.4。D-有用的开发工具 21.5。电子版 21.6。F-这本书的翻译 21.7。G-如何制造锈蚀和“夜锈” </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-2%E7%AB%A0-%E7%BC%96%E5%86%99%E7%8C%9C%E8%B0%9C%E6%B8%B8%E6%88%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-2%E7%AB%A0-%E7%BC%96%E5%86%99%E7%8C%9C%E8%B0%9C%E6%B8%B8%E6%88%8F/</guid>
      <description>第 2章 编写猜谜游戏 use std::io;fn main() {println!(&amp;#34;Guess the number!&amp;#34;);println!(&amp;#34;Please input your guess.&amp;#34;);let mut guess = String::new();io::stdin().read_line(&amp;amp;mut guess).expect(&amp;#34;Failed to read line&amp;#34;);println!(&amp;#34;You guessed: {}&amp;#34;, guess);} 让我们逐行进行介绍。为了获得用户输入，然后将结果打印为输出，我们需要将 io(input/output)库纳入范围。该io库来自标准库（称为std）：
use std::io; Rust 的标准库，有一个 prelude 子模块，这里面包含了默认导入（std 库是默认导入的，然后 std 库中的 prelude 下面的东西也是默认导入的）的所有符号。
use 关键字 use 关键字能够将模块标识符引入当前作用域,这样就解决了局部模块路径过长的问题。 所有的系统库模块都是被默认导入的，所以在使用的时候只需要使用 use 关键字简化路径就可以方便的使用了。 当然，有些情况下存在两个相同的名称，且同样需要导入，我们可以使用 as 关键字为标识符添加别名</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-3%E7%AB%A0-%E9%80%9A%E7%94%A8%E7%BC%96%E7%A8%8B%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-3%E7%AB%A0-%E9%80%9A%E7%94%A8%E7%BC%96%E7%A8%8B%E6%A6%82%E5%BF%B5/</guid>
      <description> 第 3章 通用编程概念 3.1。变量和可变性 3.2。资料类型 3.3。功能 3.4。注释 3.5。控制流 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-4%E7%AB%A0-%E4%BA%86%E8%A7%A3%E6%89%80%E6%9C%89%E6%9D%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-4%E7%AB%A0-%E4%BA%86%E8%A7%A3%E6%89%80%E6%9C%89%E6%9D%83/</guid>
      <description> 第 4章 了解所有权 4.1。什么是所有权？ 4.2。参考和借阅 4.3。切片类型 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-5%E7%AB%A0-%E4%BD%BF%E7%94%A8%E7%BB%93%E6%9E%84%E6%9D%A5%E6%9E%84%E9%80%A0%E7%9B%B8%E5%85%B3%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-5%E7%AB%A0-%E4%BD%BF%E7%94%A8%E7%BB%93%E6%9E%84%E6%9D%A5%E6%9E%84%E9%80%A0%E7%9B%B8%E5%85%B3%E6%95%B0%E6%8D%AE/</guid>
      <description> 第 5章 使用结构来构造相关数据 5.1。定义和实例化结构 5.2。使用结构的示例程序 5.3。方法语法 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-6%E7%AB%A0-%E6%9E%9A%E4%B8%BE%E5%92%8C%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-6%E7%AB%A0-%E6%9E%9A%E4%B8%BE%E5%92%8C%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</guid>
      <description> 第 6章 枚举和模式匹配 6.1。定义枚举 6.2。匹配控制流运算符 6.3。如果让简洁控制流 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-7%E7%AB%A0-%E4%BD%BF%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%8C%85%E6%9D%BF%E6%9D%A1%E7%AE%B1%E5%92%8C%E6%A8%A1%E5%9D%97%E7%AE%A1%E7%90%86%E4%B8%8D%E6%96%AD%E5%A2%9E%E9%95%BF%E7%9A%84%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-7%E7%AB%A0-%E4%BD%BF%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%8C%85%E6%9D%BF%E6%9D%A1%E7%AE%B1%E5%92%8C%E6%A8%A1%E5%9D%97%E7%AE%A1%E7%90%86%E4%B8%8D%E6%96%AD%E5%A2%9E%E9%95%BF%E7%9A%84%E9%A1%B9%E7%9B%AE/</guid>
      <description>第 7 章 使用软件包，板条箱和模块管理不断增长的项目 Rust 中有三和重要的组织概念：包、箱、模块。
Packages: A Cargo feature that lets you build, test, and share crates 包装：货运功能，可让您构建，测试和共享包装箱 Crates: A tree of modules that produces a library or executable 板条箱：产生库或可执行文件的模块树 Modules and use: Let you control the organization, scope, and privacy of paths 模块和用途：让您控制路径的组织，范围和隐私 Paths: A way of naming an item, such as a struct, function, or module 路径：一种命名项目的方法，例如结构，函数或模块 7.1。Packages and Crates 包装和板条箱 Cargo 是 Rust 的构建系统和包管理器。它可以帮助开发人员下载和管理依赖项，并帮助创建 Rust 包。在 Rust 社区中，Rust 中的“包”通常被称为“crate”（板条箱），因此在安装 Rust 时会得到 Cargo。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-8%E7%AB%A0-%E5%B8%B8%E7%94%A8%E6%94%B6%E8%97%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-8%E7%AB%A0-%E5%B8%B8%E7%94%A8%E6%94%B6%E8%97%8F/</guid>
      <description>第 8章 Common Collections 常用集合 Rust’s standard library includes a number of very useful data structures called collections. Most other data types represent one specific value, but collections can contain multiple values. Unlike the built-in array and tuple types, the data these collections point to is stored on the heap, which means the amount of data does not need to be known at compile time and can grow or shrink as the program runs.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-9%E7%AB%A0-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/The-Rust-Programming-Language-%E7%AC%AC-9%E7%AB%A0-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid>
      <description> 第 9章 错误处理 9.1。不可挽回的错误与恐慌！ 9.2。结果可恢复错误 9.3。恐慌！还是不要慌！ </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/%E6%A0%87%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/1Book/The-Rust-Programming-Language/%E6%A0%87%E9%A2%98/</guid>
      <description> Rust编程语言 标签：Rust、基础、 时间：2020年8月6日6:25:00 连接：http://www.saveload.cn/html/templates/Thinking-In-Java.mk 前言 介绍 </description>
    </item>
    
  </channel>
</rss>
