<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Save Load</title>
    <link>https://www.saveload.cn/Tech/8IDE/Docker/</link>
    <description>Recent content in Docker on Save Load</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.saveload.cn/Tech/8IDE/Docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/8IDE/Docker/Docker-Dockerfile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/8IDE/Docker/Docker-Dockerfile/</guid>
      <description>Docker Dockerfile 什么是 Dockerfile？ Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。
使用 Dockerfile 定制镜像 FROM nginxRUN echo &amp;#39;这是一个本地构建的nginx镜像&amp;#39; &amp;gt; /usr/share/nginx/html/index.html 2、FROM 和 RUN 指令的作用 FROM：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。
RUN：用于执行后面跟着的命令行命令。有以下俩种格式：
shell 格式：
RUN &amp;lt;命令行命令&amp;gt;# &amp;lt;命令行命令&amp;gt; 等同于，在终端操作的 shell 命令。 exec 格式：
RUN [&amp;#34;可执行文件&amp;#34;, &amp;#34;参数1&amp;#34;, &amp;#34;参数2&amp;#34;]# 例如：# RUN [&amp;#34;./test.php&amp;#34;, &amp;#34;dev&amp;#34;, &amp;#34;offline&amp;#34;] 等价于 RUN ./test.php dev offline 注意：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。例如：
FROM centosRUN yum -y install wgetRUN wget -O redis.tar.gz &amp;#34;http://download.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.saveload.cn/Tech/8IDE/Docker/Docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.saveload.cn/Tech/8IDE/Docker/Docker/</guid>
      <description>Docker 应知应会 1、关于 Docker 1.1、关于 Docker Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。
Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。
容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。
1.1.1、Docker 的应用场景 Web 应用的自动化打包和发布。
自动化测试和持续集成、发布。
在服务型环境中部署和调整数据库或其他的后台应用。
从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境
1.1.2、相关链接 Docker 官网：https://www.docker.com
Github Docker 源码：https://github.com/docker/docker-ce
1.2、Docker 架构 Docker 包括三个基本概念:
镜像（Image）：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。 容器（Container）：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。 仓库（Repository）：仓库可看成一个代码控制中心，用来保存镜像。 Docker 使用客户端-服务器 (C/S) 架构模式，使用远程API来管理和创建Docker 容器。
Docker 容器通过 Docker 镜像来创建。
容器与镜像的关系类似于面向对象编程中的对象与类。
概念 说明 Docker 镜像(Images) Docker 镜像是用于创建 Docker 容器的模板，比如 Ubuntu 系统。 Docker 容器(Container) 容器是独立运行的一个或一组应用，是镜像运行时的实体。 Docker 客户端(Client) Docker 客户端通过命令行或者其他工具使用 Docker SDK (https://docs.</description>
    </item>
    
  </channel>
</rss>
